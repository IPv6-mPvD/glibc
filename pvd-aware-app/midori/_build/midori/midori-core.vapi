/* midori-core.vapi generated by valac 0.40.4, do not modify. */

[CCode (cprefix = "G", gir_namespace = "GLib", gir_version = "2.0", lower_case_cprefix = "g_")]
namespace GLib {
}
[CCode (cprefix = "Katze", lower_case_cprefix = "katze_")]
namespace Katze {
	[CCode (cheader_filename = "midori-core.h")]
	public class SeparatorAction : Gtk.Action {
		public SeparatorAction ();
		public override unowned Gtk.Widget create_menu_item ();
		public override unowned Gtk.Widget create_tool_item ();
	}
}
namespace Midori {
	namespace Dialog {
		[CCode (cheader_filename = "midori-core.h")]
		public static new int run (Gtk.Dialog dialog);
	}
	namespace Download {
		[CCode (cheader_filename = "midori-core.h")]
		public static bool action_clear (WebKit.Download download, Gtk.Widget widget) throws GLib.Error;
		[CCode (cheader_filename = "midori-core.h")]
		public static string action_stock_id (WebKit.Download download);
		[CCode (cheader_filename = "midori-core.h")]
		public static string calculate_tooltip (WebKit.Download download);
		[CCode (cheader_filename = "midori-core.h")]
		public static string clean_filename (string filename);
		[CCode (cheader_filename = "midori-core.h")]
		public static unowned string fallback_extension (string? extension, string mime_type);
		[CCode (cheader_filename = "midori-core.h")]
		public static string get_basename_for_display (string uri);
		[CCode (cheader_filename = "midori-core.h")]
		public static string get_content_type (WebKit.Download download, string? mime_type);
		[CCode (cheader_filename = "midori-core.h")]
		public static string? get_extension_for_uri (string uri, out string basename = null);
		[CCode (cheader_filename = "midori-core.h")]
		public static string get_filename_suggestion_for_uri (string mime_type, string uri);
		[CCode (cheader_filename = "midori-core.h")]
		public static double get_progress (WebKit.Download download);
		[CCode (cheader_filename = "midori-core.h")]
		public static string get_suggested_filename (WebKit.Download download);
		[CCode (cheader_filename = "midori-core.h")]
		public static int get_type (WebKit.Download download);
		[CCode (cheader_filename = "midori-core.h")]
		public static string get_unique_filename (string filename);
		[CCode (cheader_filename = "midori-core.h")]
		public static bool has_enough_space (WebKit.Download download, string destination_uri, bool quiet = false);
		[CCode (cheader_filename = "midori-core.h")]
		public static bool has_wrong_checksum (WebKit.Download download);
		[CCode (cheader_filename = "midori-core.h")]
		public static bool is_finished (WebKit.Download download);
		[CCode (cheader_filename = "midori-core.h")]
		public static bool open (WebKit.Download download, Gtk.Widget widget) throws GLib.Error;
		[CCode (cheader_filename = "midori-core.h")]
		public static string prepare_destination_uri (WebKit.Download download, string? folder);
		[CCode (cheader_filename = "midori-core.h")]
		public static void set_type (WebKit.Download download, int type);
	}
	namespace Paths {
		namespace Test {
			[CCode (cheader_filename = "midori-core.h")]
			public static void reset_runtime_mode ();
		}
		[CCode (cheader_filename = "midori-core.h")]
		public static void clear_icons ();
		[CCode (cheader_filename = "midori-core.h")]
		public static unowned string get_cache_dir ();
		[CCode (cheader_filename = "midori-core.h")]
		public static unowned string get_cache_dir_for_reading ();
		[CCode (cheader_filename = "midori-core.h")]
		public static unowned string[] get_command_line ();
		[CCode (cheader_filename = "midori-core.h")]
		public static string get_command_line_str (bool for_display);
		[CCode (cheader_filename = "midori-core.h")]
		public static string get_config_dir_for_reading ();
		[CCode (cheader_filename = "midori-core.h")]
		public static unowned string get_config_dir_for_writing ();
		[CCode (cheader_filename = "midori-core.h")]
		public static string get_config_filename_for_reading (string filename);
		[CCode (cheader_filename = "midori-core.h")]
		public static string get_config_filename_for_writing (string filename);
		[CCode (cheader_filename = "midori-core.h")]
		public static string get_data_filename (string filename, bool res);
		[CCode (cheader_filename = "midori-core.h")]
		public static string get_extension_config_dir (string extension);
		[CCode (cheader_filename = "midori-core.h")]
		public static string get_extension_preset_filename (string extension, string filename);
		[CCode (cheader_filename = "midori-core.h")]
		public static Gdk.Pixbuf? get_icon (string? uri, Gtk.Widget? widget);
		[CCode (cheader_filename = "midori-core.h")]
		public static string get_lib_path (string package);
		[CCode (cheader_filename = "midori-core.h")]
		public static string get_preset_filename (string? folder, string filename);
		[CCode (cheader_filename = "midori-core.h")]
		public static string get_res_filename (string filename);
		[CCode (cheader_filename = "midori-core.h")]
		public static unowned string get_runtime_dir ();
		[CCode (cheader_filename = "midori-core.h")]
		public static Midori.RuntimeMode get_runtime_mode ();
		[CCode (cheader_filename = "midori-core.h")]
		public static unowned string get_tmp_dir ();
		[CCode (cheader_filename = "midori-core.h")]
		public static unowned string get_user_data_dir ();
		[CCode (cheader_filename = "midori-core.h")]
		public static unowned string get_user_data_dir_for_reading ();
		[CCode (cheader_filename = "midori-core.h")]
		public static void init (Midori.RuntimeMode new_mode, string? config);
		[CCode (cheader_filename = "midori-core.h")]
		public static void init_exec_path (string[] new_command_line);
		[CCode (cheader_filename = "midori-core.h")]
		public static bool is_readonly ();
		[CCode (cheader_filename = "midori-core.h")]
		public static string make_tmp_dir (string tmpl);
		[CCode (cheader_filename = "midori-core.h")]
		public static void mkdir_with_parents (string path, int mode = 0700);
		[CCode (cheader_filename = "midori-core.h")]
		public static void remove_path (string path);
	}
	namespace Test {
		[CCode (cheader_filename = "midori-core.h")]
		public abstract class Job : GLib.Object {
			public Job ();
			public abstract async void run (GLib.Cancellable cancellable) throws GLib.Error;
			public void run_sync ();
		}
		[CCode (cheader_filename = "midori-core.h")]
		public static void grab_max_timeout ();
		[CCode (cheader_filename = "midori-core.h")]
		public static void idle_timeouts ();
		[CCode (cheader_filename = "midori-core.h")]
		public static void init ([CCode (array_length_pos = 0.9)] ref unowned string[] args);
		[CCode (cheader_filename = "midori-core.h")]
		public static void log_set_fatal_handler_for_icons ();
		[CCode (cheader_filename = "midori-core.h")]
		public static void release_max_timeout ();
		[CCode (cheader_filename = "midori-core.h")]
		public static void set_dialog_response (Gtk.ResponseType response);
		[CCode (cheader_filename = "midori-core.h")]
		public static void set_file_chooser_filename (string filename);
	}
	namespace Timeout {
		[CCode (cheader_filename = "midori-core.h")]
		public static uint add (uint interval, owned GLib.SourceFunc function);
		[CCode (cheader_filename = "midori-core.h")]
		public static uint add_seconds (uint interval, owned GLib.SourceFunc function);
	}
	[CCode (cheader_filename = "midori-core.h")]
	public class Autocompleter : GLib.Object {
		public enum Columns {
			ICON,
			URI,
			MARKUP,
			BACKGROUND,
			YALIGN,
			SIZE,
			PRIORITY,
			N
		}
		public Autocompleter (GLib.Object app);
		public async void action (string action, string text);
		public void add (Midori.Completion completion);
		public bool can_action (string action);
		public bool can_complete (string text);
		public async void complete (string text);
		public Gtk.ListStore model { get; private set; }
		public signal void populated (uint count);
	}
	[CCode (cheader_filename = "midori-core.h")]
	public class BookmarksDatabase : Midori.Database {
		public BookmarksDatabase () throws Midori.DatabaseError;
		protected void preinit () throws Midori.DatabaseError;
	}
	[CCode (cheader_filename = "midori-core.h")]
	public abstract class Completion : GLib.Object {
		public Completion ();
		public abstract bool can_action (string action);
		public abstract bool can_complete (string prefix);
		public abstract async GLib.List<Midori.Suggestion>? complete (string text, string? action, GLib.Cancellable cancellable);
		public abstract void prepare (GLib.Object app);
		public string? description { get; set; }
		public int max_items { get; internal set; }
	}
	[CCode (cheader_filename = "midori-core.h")]
	public class ContextAction : Gtk.Action {
		public delegate void ActionActivateCallback (Gtk.Action action);
		public ContextAction (string name, string? label, string? tooltip, string? stock_id);
		public void add (Gtk.Action? action);
		public void add_action_group (Gtk.ActionGroup action_group);
		public void add_by_name (string name);
		public void add_simple (string name, string? label, string? tooltip, string? stock_id, Midori.ContextAction.ActionActivateCallback callback);
		public new Gtk.Menu create_menu (Gtk.Menu? default_menu, bool accels);
		public override unowned Gtk.Widget create_tool_item ();
		public ContextAction.escaped (string name, string label, string? tooltip, string? stock_id);
		public Gtk.Action? get_by_name (string name);
	}
	[CCode (cheader_filename = "midori-core.h")]
	public class Database : GLib.Object, GLib.Initable {
		protected Sqlite.Database? _db;
		public Database (string path = ":memory:") throws Midori.DatabaseError;
		public bool attach (string path, string alias) throws Midori.DatabaseError;
		public bool exec (string query) throws Midori.DatabaseError;
		public bool exec_script (string filename) throws Midori.DatabaseError;
		public bool exists (string path);
		public virtual bool init (GLib.Cancellable? cancellable = null) throws Midori.DatabaseError;
		public Midori.DatabaseStatement prepare (string query, ...) throws Midori.DatabaseError;
		public bool transaction (Midori.DatabaseCallback callback) throws Midori.DatabaseError;
		public Sqlite.Database? db { get; }
		public bool first_use { get; protected set; }
		public string path { get; protected set; }
	}
	[CCode (cheader_filename = "midori-core.h")]
	public class DatabaseStatement : GLib.Object, GLib.Initable {
		protected Sqlite.Statement _stmt;
		public DatabaseStatement (Midori.Database database, string query) throws Midori.DatabaseError;
		public void bind (string pname, ...) throws Midori.DatabaseError;
		public bool exec () throws Midori.DatabaseError;
		public double get_double (string name) throws Midori.DatabaseError;
		public int64 get_int64 (string name) throws Midori.DatabaseError;
		public string? get_string (string name) throws Midori.DatabaseError;
		public virtual bool init (GLib.Cancellable? cancellable = null) throws Midori.DatabaseError;
		public int64 row_id () throws Midori.DatabaseError;
		public bool step () throws Midori.DatabaseError;
		public Midori.Database? database { get; set construct; }
		public string? query { get; set construct; }
		public Sqlite.Statement? stmt { get; }
	}
	[CCode (cheader_filename = "midori-core.h")]
	public class ExtensionsColumn : Gtk.TreeViewColumn {
		public ExtensionsColumn ();
		public signal void row_clicked (Gtk.TreeView view, Gtk.TreePath path);
	}
	[CCode (cheader_filename = "midori-core.h")]
	public class FileChooserDialog : Gtk.FileChooserDialog {
		public FileChooserDialog (string title, Gtk.Window? window, Gtk.FileChooserAction action);
	}
	[CCode (cheader_filename = "midori-core.h")]
	public class HSTS : GLib.Object, Soup.SessionFeature {
		public class Directive {
			public Soup.Date? expires;
			public bool sub_domains;
			public Directive (string max_age, bool include_sub_domains);
			public Directive.from_header (string header);
			public bool is_expired ();
			public bool is_valid ();
		}
		public HSTS ();
	}
	[CCode (cheader_filename = "midori-core.h")]
	public class HistoryCompletion : Midori.Completion {
		public Midori.HistoryDatabase? database;
		public HistoryCompletion ();
		public override bool can_action (string action);
		public override bool can_complete (string text);
		public override async GLib.List<Midori.Suggestion>? complete (string text, string? action, GLib.Cancellable cancellable);
		public override void prepare (GLib.Object app);
	}
	[CCode (cheader_filename = "midori-core.h")]
	public class HistoryDatabase : Midori.Database {
		public HistoryDatabase (GLib.Object? app) throws Midori.DatabaseError;
		public bool clear (int64 maximum_age = 0) throws Midori.DatabaseError;
		public bool insert (string uri, string title, int64 date, int64 day) throws Midori.DatabaseError;
		public async GLib.List<Midori.HistoryItem>? list_by_count_with_bookmarks (string? filter, int max_items, GLib.Cancellable cancellable);
		public async GLib.List<Midori.HistoryItem>? query (string sqlcmd, string? filter, int64 day, int64 max_items, GLib.Cancellable cancellable);
	}
	[CCode (cheader_filename = "midori-core.h")]
	public class HistoryItem : GLib.Object {
		public HistoryItem ();
		public int64 date { get; set; }
		public string? title { get; set; }
	}
	[CCode (cheader_filename = "midori-core.h")]
	public class HistorySearch : Midori.HistoryItem {
		public HistorySearch (string uri, string keywords, int64 date);
		public string keywords { get; set; }
		public string uri { get; set; }
	}
	[CCode (cheader_filename = "midori-core.h")]
	public class HistoryWebsite : Midori.HistoryItem {
		public HistoryWebsite (string uri, string? title, int64 date);
		public string uri { get; set; }
	}
	[CCode (cheader_filename = "midori-core.h")]
	public class Notebook : Gtk.EventBox {
		public Gtk.Notebook notebook;
		[CCode (type = "GtkWidget*")]
		public Notebook ();
		public override bool expose_event (Gdk.EventExpose event);
		public override void forall_internal (bool include_internal, Gtk.Callback callback);
		public Midori.ContextAction get_context_action ();
		public Midori.Tab get_nth_tab (int index);
		public Midori.ContextAction get_tab_context_action (Midori.Tab tab);
		public int get_tab_index (Midori.Tab tab);
		public void insert (Midori.Tab tab, int index);
		public void move (Midori.Tab tab, int index);
		public new void remove (Midori.Tab tab);
		public bool close_buttons_left { get; set; }
		public bool close_buttons_visible { get; set; }
		public uint count { get; private set; }
		public int index { get; set; }
		public bool labels_visible { get; set; }
		public Midori.Tab? tab { get; set; }
		public signal void context_menu (Midori.ContextAction menu);
		public signal void new_tab ();
		public signal void tab_context_menu (Midori.Tab tab, Midori.ContextAction menu);
		public signal void tab_detached (Midori.Tab tab, int x, int y);
		public signal void tab_moved (Midori.Tab tab, uint new_index);
		public signal void tab_switched (Midori.Tab? old, Midori.Tab @new);
	}
	[CCode (cheader_filename = "midori-core.h")]
	public class PanedAction : Gtk.Action {
		public PanedAction ();
		public override unowned Gtk.Widget create_tool_item ();
		public Gtk.Widget? get_child1 ();
		public string get_child1_name ();
		public Gtk.Widget? get_child2 ();
		public string get_child2_name ();
		public Gtk.Widget? get_child_by_name (string name);
		public void set_child1 (Gtk.Widget widget, string name, bool resize, bool shrink);
		public void set_child2 (Gtk.Widget widget, string name, bool resize, bool shrink);
	}
	[CCode (cheader_filename = "midori-core.h")]
	public class SearchCompletion : Midori.Completion {
		public SearchCompletion ();
		public override bool can_action (string action);
		public override bool can_complete (string text);
		public override async GLib.List<Midori.Suggestion>? complete (string text, string? action, GLib.Cancellable cancellable);
		public override void prepare (GLib.Object app);
	}
	[CCode (cheader_filename = "midori-core.h")]
	public class SeparatorContextAction : Midori.ContextAction {
		public SeparatorContextAction ();
	}
	[CCode (cheader_filename = "midori-core.h")]
	public class Settings : WebKit.WebSettings {
		public Settings ();
		public bool delay_saving (string property);
		public bool always_show_tabbar { get; set; }
		public string? block_uris { get; set; }
		public string? clear_data { get; set; }
		public int clear_private_data { get; set; }
		public bool close_buttons_on_tabs { get; set; }
		public bool compact_sidepanel { get; set; }
		public string? custom_title { get; set; }
		public string default_charset { owned get; set; }
		public string? default_theme_name { get; }
		public string download_folder { get; set; }
		public bool enable_javascript { get; set; }
		public bool find_while_typing { get; set; }
		public bool first_party_cookies_only { get; set; }
		public bool flash_window_on_new_bg_tabs { get; set; }
		public string homepage { get; set; }
		public string http_proxy { get; set; }
		public int http_proxy_port { get; set; }
		public uint inactivity_reset { get; set; }
		public bool kinetic_scrolling { get; set; }
		public bool last_inspector_attached { get; set; }
		public int last_panel_page { get; set; }
		public int last_panel_position { get; set; }
		public int last_web_search { get; set; }
		public int last_window_height { get; set; }
		public Midori.WindowState last_window_state { get; set; }
		public int last_window_width { get; set; }
		public string? location_entry_search { get; set; }
		public int maximum_cache_size { get; set; }
		public int maximum_cookie_age { get; set; }
		public int maximum_history_age { get; set; }
		public bool middle_click_opens_selection { get; set; }
		public string? news_aggregator { get; set; }
		public bool open_panels_in_windows { get; set; }
		public bool open_popups_in_tabs { get; set; }
		public bool open_tabs_in_the_background { get; set; }
		public bool open_tabs_next_to_current { get; set; }
		public bool remember_last_window_size { get; set; }
		public bool right_align_sidepanel { get; set; }
		public int search_width { get; set; }
		public bool show_bookmarkbar { get; set; }
		public bool show_crash_dialog { get; set; }
		public bool show_menubar { get; set; }
		public bool show_navigationbar { get; set; }
		public bool show_panel { get; set; }
		public bool show_statusbar { get; set; }
		public bool strip_referer { get; set; }
		public string tabhome { get; set; }
		public string? text_editor { get; set; }
		public string? theme_name { get; set; }
		public string toolbar_items { get; set; }
		public double zoom_level { get; set; }
		public bool zoom_text_and_images { get; set; }
	}
	[CCode (cheader_filename = "midori-core.h")]
	public class SpeedDial : GLib.Object {
		public class Spec {
			public string dial_id;
			public string uri;
			public Spec (string dial_id, string uri);
		}
		public GLib.KeyFile keyfile;
		public SpeedDial (string new_filename, string? fallback = null);
		public void add (string uri, string title, Gdk.Pixbuf? img);
		public void add_with_id (string id, string uri, string title, Gdk.Pixbuf? img);
		public unowned string get_html () throws GLib.Error;
		public string get_next_free_slot (out uint count = null);
		public void save_message (string message) throws GLib.Error;
		public bool close_buttons_left { get; set; }
		public signal void refresh ();
	}
	[CCode (cheader_filename = "midori-core.h")]
	public class Suggestion : GLib.Object {
		public Suggestion (string? uri, string? markup, bool use_markup = false, string? background = null, GLib.Icon? icon = null, int? priority = 0);
		public bool action { get; set; }
		public string? background { get; set; }
		public GLib.Icon? icon { get; set; }
		public string? markup { get; set; }
		public int priority { get; set; }
		public string? uri { get; set; }
		public bool use_markup { get; set; }
	}
	[CCode (cheader_filename = "midori-core.h")]
	public class Tab : Gtk.VBox {
		public Tab ();
		public bool can_go_forward ();
		public bool can_save ();
		public bool can_view_source ();
		public bool find (string text, bool case_sensitive, bool forward);
		public static Pango.EllipsizeMode get_display_ellipsize (string title, string uri);
		public static string get_display_title (string? title, string uri);
		public void go_forward ();
		public void inject_stylesheet (string stylesheet);
		public bool is_blank ();
		public void stop_loading ();
		public void unmark_text_matches ();
		public async void update_actions (Gtk.ActionGroup actions);
		public Gdk.Color? bg_color { get; protected set; }
		public Gdk.Color? fg_color { get; protected set; }
		public bool is_dialog { get; protected set; }
		public Midori.LoadError load_error { get; protected set; }
		public Midori.LoadStatus load_status { get; protected set; }
		public string mime_type { get; protected set; }
		public bool minimized { get; set; }
		public double progress { get; protected set; }
		public Midori.Tab related { get; set construct; }
		public Midori.Security security { get; protected set; }
		public bool special { get; protected set; }
		public string? statusbar_text { get; protected set; }
		public string uri { get; protected set; }
		public bool view_source { get; private set; }
		public WebKit.WebView web_view { get; private set; }
		public signal void attach_inspector (WebKit.WebView inspector_view);
		public signal void colors_changed ();
		public signal void console_message (string message, int line, string source_id);
		public signal void context_menu (WebKit.HitTestResult hit_test_result, Midori.ContextAction menu);
		public signal void detach_inspector (WebKit.WebView inspector_view);
		public signal bool navigation_requested (string uri);
		public signal bool open_uri (string uri);
		public signal void search_text (bool found, string typing);
	}
	[CCode (cheader_filename = "midori-core.h")]
	public class URI : GLib.Object {
		public class Icon : GLib.InitiallyUnowned, GLib.Icon, GLib.LoadableIcon {
			public Icon (string website_uri, GLib.Icon? fallback = null);
			public GLib.Icon? fallback { get; private set; }
			public string uri { get; private set; }
		}
		public URI ();
		public static string for_search (string? uri, string keywords);
		public static string format_for_display (string? uri);
		public static string get_base_domain (string uri);
		public static GLib.ChecksumType get_fingerprint (string uri, out string checksum, out string label);
		public static string? get_folder (string uri);
		public static async GLib.Icon? get_icon (string uri, GLib.Cancellable? cancellable = null) throws GLib.Error;
		public static async GLib.Icon? get_icon_fallback (string uri, GLib.Icon? fallback = null, GLib.Cancellable? cancellable = null);
		public static bool is_blank (string? uri);
		public static bool is_http (string? uri);
		public static bool is_ip_address (string? uri);
		public static bool is_location (string? uri);
		public static bool is_resource (string? uri);
		public static bool is_valid (string? uri);
		public static string parse (string uri, out string path);
		public static string? parse_hostname (string? uri, out string path);
		public static bool recursive_fork_protection (string uri, bool set_uri);
		public static string strip_prefix_for_display (string uri);
		public static string to_ascii (string uri);
		public static string unescape (string uri_str);
	}
	[CCode (cheader_filename = "midori-core.h")]
	public class ViewCompletion : Midori.Completion {
		public ViewCompletion ();
		public override bool can_action (string action);
		public override bool can_complete (string text);
		public override async GLib.List<Midori.Suggestion>? complete (string text, string? action, GLib.Cancellable cancellable);
		public override void prepare (GLib.Object app);
	}
	[CCode (cheader_filename = "midori-core.h")]
	public class Window : Gtk.Window {
		[CCode (type = "GtkWidget*")]
		public Window ();
		public void add_action (Gtk.Action action);
		public void add_action_group (Gtk.ActionGroup action_group);
		public void add_toolbar (Gtk.Widget toolbar);
		public Gtk.ToolItem? get_tool_item (string name);
		public void remove_action (Gtk.Action action);
		public string actions { get; set; }
		public Gtk.Widget? contents { get; set; }
		public bool show_menubar { get; set; }
		public Gtk.Widget? toolbar { get; }
		public signal bool context_menu (Gtk.Widget widget, Gtk.Action? action = null);
	}
	[CCode (cheader_filename = "midori-core.h")]
	public interface Viewable {
		public abstract unowned string get_label ();
		public abstract unowned string get_stock_id ();
		public abstract Gtk.Widget get_toolbar ();
		public signal void populate_option_menu (Gtk.Menu menu);
	}
	[CCode (cheader_filename = "midori-core.h", cprefix = "MIDORI_LOAD_ERROR_")]
	public enum LoadError {
		NONE,
		DELAYED,
		SECURITY,
		CRASH,
		NETWORK
	}
	[CCode (cheader_filename = "midori-core.h", cprefix = "MIDORI_LOAD_")]
	public enum LoadStatus {
		FINISHED,
		COMMITTED,
		PROVISIONAL
	}
	[CCode (cheader_filename = "midori-core.h")]
	public enum NewView {
		TAB,
		BACKGROUND,
		WINDOW
	}
	[CCode (cheader_filename = "midori-core.h")]
	public enum RuntimeMode {
		UNDEFINED,
		NORMAL,
		APP,
		PRIVATE,
		PORTABLE
	}
	[CCode (cheader_filename = "midori-core.h")]
	public enum Security {
		NONE,
		UNKNOWN,
		TRUSTED
	}
	[CCode (cheader_filename = "midori-core.h", cprefix = "MIDORI_WINDOW_")]
	public enum WindowState {
		NORMAL,
		MINIMIZED,
		MAXIMIZED,
		FULLSCREEN
	}
	[CCode (cheader_filename = "midori-core.h")]
	public errordomain DatabaseError {
		OPEN,
		NAMING,
		FILENAME,
		EXECUTE,
		COMPILE,
		TYPE
	}
	[CCode (cheader_filename = "midori-core.h")]
	public errordomain SpeedDialError {
		INVALID_MESSAGE,
		NO_ACTION,
		NO_ID,
		NO_URL,
		NO_TITLE,
		NO_ID2,
		INVALID_ACTION
	}
	[CCode (cheader_filename = "midori-core.h")]
	public delegate bool DatabaseCallback () throws Midori.DatabaseError;
	[CCode (cheader_filename = "midori-core.h")]
	public static void show_message_dialog (Gtk.MessageType type, string short, string detailed, bool modal);
}
namespace Sokoke {
}
