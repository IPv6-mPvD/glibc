/* midori-core.h generated by valac 0.40.4, the Vala compiler, do not modify */


#ifndef __MIDORI_CORE_H__
#define __MIDORI_CORE_H__

#include <glib.h>
#include <gtk/gtk.h>
#include <glib-object.h>
#include <libsoup/soup.h>
#include <stdlib.h>
#include <string.h>
#include <gdk-pixbuf/gdk-pixbuf.h>
#include <gio/gio.h>
#include <sqlite3.h>
#include <float.h>
#include <math.h>
#include "webkit/webkit.h"
#include <pango/pango.h>
#include <gdk/gdk.h>

G_BEGIN_DECLS


#define KATZE_TYPE_SEPARATOR_ACTION (katze_separator_action_get_type ())
#define KATZE_SEPARATOR_ACTION(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), KATZE_TYPE_SEPARATOR_ACTION, KatzeSeparatorAction))
#define KATZE_SEPARATOR_ACTION_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), KATZE_TYPE_SEPARATOR_ACTION, KatzeSeparatorActionClass))
#define KATZE_IS_SEPARATOR_ACTION(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), KATZE_TYPE_SEPARATOR_ACTION))
#define KATZE_IS_SEPARATOR_ACTION_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), KATZE_TYPE_SEPARATOR_ACTION))
#define KATZE_SEPARATOR_ACTION_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), KATZE_TYPE_SEPARATOR_ACTION, KatzeSeparatorActionClass))

typedef struct _KatzeSeparatorAction KatzeSeparatorAction;
typedef struct _KatzeSeparatorActionClass KatzeSeparatorActionClass;
typedef struct _KatzeSeparatorActionPrivate KatzeSeparatorActionPrivate;

#define MIDORI_TYPE_HSTS (midori_hsts_get_type ())
#define MIDORI_HSTS(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), MIDORI_TYPE_HSTS, MidoriHSTS))
#define MIDORI_HSTS_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), MIDORI_TYPE_HSTS, MidoriHSTSClass))
#define MIDORI_IS_HSTS(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), MIDORI_TYPE_HSTS))
#define MIDORI_IS_HSTS_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), MIDORI_TYPE_HSTS))
#define MIDORI_HSTS_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), MIDORI_TYPE_HSTS, MidoriHSTSClass))

typedef struct _MidoriHSTS MidoriHSTS;
typedef struct _MidoriHSTSClass MidoriHSTSClass;
typedef struct _MidoriHSTSPrivate MidoriHSTSPrivate;

#define MIDORI_HSTS_TYPE_DIRECTIVE (midori_hsts_directive_get_type ())
#define MIDORI_HSTS_DIRECTIVE(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), MIDORI_HSTS_TYPE_DIRECTIVE, MidoriHSTSDirective))
#define MIDORI_HSTS_DIRECTIVE_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), MIDORI_HSTS_TYPE_DIRECTIVE, MidoriHSTSDirectiveClass))
#define MIDORI_HSTS_IS_DIRECTIVE(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), MIDORI_HSTS_TYPE_DIRECTIVE))
#define MIDORI_HSTS_IS_DIRECTIVE_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), MIDORI_HSTS_TYPE_DIRECTIVE))
#define MIDORI_HSTS_DIRECTIVE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), MIDORI_HSTS_TYPE_DIRECTIVE, MidoriHSTSDirectiveClass))

typedef struct _MidoriHSTSDirective MidoriHSTSDirective;
typedef struct _MidoriHSTSDirectiveClass MidoriHSTSDirectiveClass;
typedef struct _MidoriHSTSDirectivePrivate MidoriHSTSDirectivePrivate;

#define MIDORI_TYPE_RUNTIME_MODE (midori_runtime_mode_get_type ())

#define MIDORI_TYPE_URI (midori_uri_get_type ())
#define MIDORI_URI(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), MIDORI_TYPE_URI, MidoriURI))
#define MIDORI_URI_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), MIDORI_TYPE_URI, MidoriURIClass))
#define MIDORI_IS_URI(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), MIDORI_TYPE_URI))
#define MIDORI_IS_URI_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), MIDORI_TYPE_URI))
#define MIDORI_URI_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), MIDORI_TYPE_URI, MidoriURIClass))

typedef struct _MidoriURI MidoriURI;
typedef struct _MidoriURIClass MidoriURIClass;
typedef struct _MidoriURIPrivate MidoriURIPrivate;

#define MIDORI_URI_TYPE_ICON (midori_uri_icon_get_type ())
#define MIDORI_URI_ICON(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), MIDORI_URI_TYPE_ICON, MidoriURIIcon))
#define MIDORI_URI_ICON_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), MIDORI_URI_TYPE_ICON, MidoriURIIconClass))
#define MIDORI_URI_IS_ICON(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), MIDORI_URI_TYPE_ICON))
#define MIDORI_URI_IS_ICON_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), MIDORI_URI_TYPE_ICON))
#define MIDORI_URI_ICON_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), MIDORI_URI_TYPE_ICON, MidoriURIIconClass))

typedef struct _MidoriURIIcon MidoriURIIcon;
typedef struct _MidoriURIIconClass MidoriURIIconClass;
typedef struct _MidoriURIIconPrivate MidoriURIIconPrivate;

#define MIDORI_TYPE_DATABASE (midori_database_get_type ())
#define MIDORI_DATABASE(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), MIDORI_TYPE_DATABASE, MidoriDatabase))
#define MIDORI_DATABASE_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), MIDORI_TYPE_DATABASE, MidoriDatabaseClass))
#define MIDORI_IS_DATABASE(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), MIDORI_TYPE_DATABASE))
#define MIDORI_IS_DATABASE_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), MIDORI_TYPE_DATABASE))
#define MIDORI_DATABASE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), MIDORI_TYPE_DATABASE, MidoriDatabaseClass))

typedef struct _MidoriDatabase MidoriDatabase;
typedef struct _MidoriDatabaseClass MidoriDatabaseClass;
typedef struct _MidoriDatabasePrivate MidoriDatabasePrivate;

#define MIDORI_TYPE_BOOKMARKS_DATABASE (midori_bookmarks_database_get_type ())
#define MIDORI_BOOKMARKS_DATABASE(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), MIDORI_TYPE_BOOKMARKS_DATABASE, MidoriBookmarksDatabase))
#define MIDORI_BOOKMARKS_DATABASE_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), MIDORI_TYPE_BOOKMARKS_DATABASE, MidoriBookmarksDatabaseClass))
#define MIDORI_IS_BOOKMARKS_DATABASE(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), MIDORI_TYPE_BOOKMARKS_DATABASE))
#define MIDORI_IS_BOOKMARKS_DATABASE_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), MIDORI_TYPE_BOOKMARKS_DATABASE))
#define MIDORI_BOOKMARKS_DATABASE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), MIDORI_TYPE_BOOKMARKS_DATABASE, MidoriBookmarksDatabaseClass))

typedef struct _MidoriBookmarksDatabase MidoriBookmarksDatabase;
typedef struct _MidoriBookmarksDatabaseClass MidoriBookmarksDatabaseClass;
typedef struct _MidoriBookmarksDatabasePrivate MidoriBookmarksDatabasePrivate;

#define MIDORI_TYPE_SUGGESTION (midori_suggestion_get_type ())
#define MIDORI_SUGGESTION(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), MIDORI_TYPE_SUGGESTION, MidoriSuggestion))
#define MIDORI_SUGGESTION_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), MIDORI_TYPE_SUGGESTION, MidoriSuggestionClass))
#define MIDORI_IS_SUGGESTION(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), MIDORI_TYPE_SUGGESTION))
#define MIDORI_IS_SUGGESTION_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), MIDORI_TYPE_SUGGESTION))
#define MIDORI_SUGGESTION_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), MIDORI_TYPE_SUGGESTION, MidoriSuggestionClass))

typedef struct _MidoriSuggestion MidoriSuggestion;
typedef struct _MidoriSuggestionClass MidoriSuggestionClass;
typedef struct _MidoriSuggestionPrivate MidoriSuggestionPrivate;

#define MIDORI_TYPE_COMPLETION (midori_completion_get_type ())
#define MIDORI_COMPLETION(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), MIDORI_TYPE_COMPLETION, MidoriCompletion))
#define MIDORI_COMPLETION_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), MIDORI_TYPE_COMPLETION, MidoriCompletionClass))
#define MIDORI_IS_COMPLETION(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), MIDORI_TYPE_COMPLETION))
#define MIDORI_IS_COMPLETION_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), MIDORI_TYPE_COMPLETION))
#define MIDORI_COMPLETION_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), MIDORI_TYPE_COMPLETION, MidoriCompletionClass))

typedef struct _MidoriCompletion MidoriCompletion;
typedef struct _MidoriCompletionClass MidoriCompletionClass;
typedef struct _MidoriCompletionPrivate MidoriCompletionPrivate;

#define MIDORI_TYPE_AUTOCOMPLETER (midori_autocompleter_get_type ())
#define MIDORI_AUTOCOMPLETER(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), MIDORI_TYPE_AUTOCOMPLETER, MidoriAutocompleter))
#define MIDORI_AUTOCOMPLETER_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), MIDORI_TYPE_AUTOCOMPLETER, MidoriAutocompleterClass))
#define MIDORI_IS_AUTOCOMPLETER(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), MIDORI_TYPE_AUTOCOMPLETER))
#define MIDORI_IS_AUTOCOMPLETER_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), MIDORI_TYPE_AUTOCOMPLETER))
#define MIDORI_AUTOCOMPLETER_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), MIDORI_TYPE_AUTOCOMPLETER, MidoriAutocompleterClass))

typedef struct _MidoriAutocompleter MidoriAutocompleter;
typedef struct _MidoriAutocompleterClass MidoriAutocompleterClass;
typedef struct _MidoriAutocompleterPrivate MidoriAutocompleterPrivate;

#define MIDORI_AUTOCOMPLETER_TYPE_COLUMNS (midori_autocompleter_columns_get_type ())

#define MIDORI_TYPE_CONTEXT_ACTION (midori_context_action_get_type ())
#define MIDORI_CONTEXT_ACTION(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), MIDORI_TYPE_CONTEXT_ACTION, MidoriContextAction))
#define MIDORI_CONTEXT_ACTION_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), MIDORI_TYPE_CONTEXT_ACTION, MidoriContextActionClass))
#define MIDORI_IS_CONTEXT_ACTION(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), MIDORI_TYPE_CONTEXT_ACTION))
#define MIDORI_IS_CONTEXT_ACTION_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), MIDORI_TYPE_CONTEXT_ACTION))
#define MIDORI_CONTEXT_ACTION_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), MIDORI_TYPE_CONTEXT_ACTION, MidoriContextActionClass))

typedef struct _MidoriContextAction MidoriContextAction;
typedef struct _MidoriContextActionClass MidoriContextActionClass;
typedef struct _MidoriContextActionPrivate MidoriContextActionPrivate;

#define MIDORI_TYPE_SEPARATOR_CONTEXT_ACTION (midori_separator_context_action_get_type ())
#define MIDORI_SEPARATOR_CONTEXT_ACTION(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), MIDORI_TYPE_SEPARATOR_CONTEXT_ACTION, MidoriSeparatorContextAction))
#define MIDORI_SEPARATOR_CONTEXT_ACTION_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), MIDORI_TYPE_SEPARATOR_CONTEXT_ACTION, MidoriSeparatorContextActionClass))
#define MIDORI_IS_SEPARATOR_CONTEXT_ACTION(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), MIDORI_TYPE_SEPARATOR_CONTEXT_ACTION))
#define MIDORI_IS_SEPARATOR_CONTEXT_ACTION_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), MIDORI_TYPE_SEPARATOR_CONTEXT_ACTION))
#define MIDORI_SEPARATOR_CONTEXT_ACTION_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), MIDORI_TYPE_SEPARATOR_CONTEXT_ACTION, MidoriSeparatorContextActionClass))

typedef struct _MidoriSeparatorContextAction MidoriSeparatorContextAction;
typedef struct _MidoriSeparatorContextActionClass MidoriSeparatorContextActionClass;
typedef struct _MidoriSeparatorContextActionPrivate MidoriSeparatorContextActionPrivate;

#define MIDORI_TYPE_DATABASE_STATEMENT (midori_database_statement_get_type ())
#define MIDORI_DATABASE_STATEMENT(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), MIDORI_TYPE_DATABASE_STATEMENT, MidoriDatabaseStatement))
#define MIDORI_DATABASE_STATEMENT_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), MIDORI_TYPE_DATABASE_STATEMENT, MidoriDatabaseStatementClass))
#define MIDORI_IS_DATABASE_STATEMENT(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), MIDORI_TYPE_DATABASE_STATEMENT))
#define MIDORI_IS_DATABASE_STATEMENT_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), MIDORI_TYPE_DATABASE_STATEMENT))
#define MIDORI_DATABASE_STATEMENT_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), MIDORI_TYPE_DATABASE_STATEMENT, MidoriDatabaseStatementClass))

typedef struct _MidoriDatabaseStatement MidoriDatabaseStatement;
typedef struct _MidoriDatabaseStatementClass MidoriDatabaseStatementClass;
typedef struct _MidoriDatabaseStatementPrivate MidoriDatabaseStatementPrivate;

#define MIDORI_TEST_TYPE_JOB (midori_test_job_get_type ())
#define MIDORI_TEST_JOB(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), MIDORI_TEST_TYPE_JOB, MidoriTestJob))
#define MIDORI_TEST_JOB_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), MIDORI_TEST_TYPE_JOB, MidoriTestJobClass))
#define MIDORI_TEST_IS_JOB(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), MIDORI_TEST_TYPE_JOB))
#define MIDORI_TEST_IS_JOB_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), MIDORI_TEST_TYPE_JOB))
#define MIDORI_TEST_JOB_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), MIDORI_TEST_TYPE_JOB, MidoriTestJobClass))

typedef struct _MidoriTestJob MidoriTestJob;
typedef struct _MidoriTestJobClass MidoriTestJobClass;
typedef struct _MidoriTestJobPrivate MidoriTestJobPrivate;

#define MIDORI_TYPE_FILE_CHOOSER_DIALOG (midori_file_chooser_dialog_get_type ())
#define MIDORI_FILE_CHOOSER_DIALOG(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), MIDORI_TYPE_FILE_CHOOSER_DIALOG, MidoriFileChooserDialog))
#define MIDORI_FILE_CHOOSER_DIALOG_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), MIDORI_TYPE_FILE_CHOOSER_DIALOG, MidoriFileChooserDialogClass))
#define MIDORI_IS_FILE_CHOOSER_DIALOG(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), MIDORI_TYPE_FILE_CHOOSER_DIALOG))
#define MIDORI_IS_FILE_CHOOSER_DIALOG_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), MIDORI_TYPE_FILE_CHOOSER_DIALOG))
#define MIDORI_FILE_CHOOSER_DIALOG_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), MIDORI_TYPE_FILE_CHOOSER_DIALOG, MidoriFileChooserDialogClass))

typedef struct _MidoriFileChooserDialog MidoriFileChooserDialog;
typedef struct _MidoriFileChooserDialogClass MidoriFileChooserDialogClass;
typedef struct _MidoriFileChooserDialogPrivate MidoriFileChooserDialogPrivate;

#define MIDORI_TYPE_EXTENSIONS_COLUMN (midori_extensions_column_get_type ())
#define MIDORI_EXTENSIONS_COLUMN(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), MIDORI_TYPE_EXTENSIONS_COLUMN, MidoriExtensionsColumn))
#define MIDORI_EXTENSIONS_COLUMN_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), MIDORI_TYPE_EXTENSIONS_COLUMN, MidoriExtensionsColumnClass))
#define MIDORI_IS_EXTENSIONS_COLUMN(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), MIDORI_TYPE_EXTENSIONS_COLUMN))
#define MIDORI_IS_EXTENSIONS_COLUMN_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), MIDORI_TYPE_EXTENSIONS_COLUMN))
#define MIDORI_EXTENSIONS_COLUMN_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), MIDORI_TYPE_EXTENSIONS_COLUMN, MidoriExtensionsColumnClass))

typedef struct _MidoriExtensionsColumn MidoriExtensionsColumn;
typedef struct _MidoriExtensionsColumnClass MidoriExtensionsColumnClass;
typedef struct _MidoriExtensionsColumnPrivate MidoriExtensionsColumnPrivate;

#define MIDORI_TYPE_HISTORY_COMPLETION (midori_history_completion_get_type ())
#define MIDORI_HISTORY_COMPLETION(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), MIDORI_TYPE_HISTORY_COMPLETION, MidoriHistoryCompletion))
#define MIDORI_HISTORY_COMPLETION_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), MIDORI_TYPE_HISTORY_COMPLETION, MidoriHistoryCompletionClass))
#define MIDORI_IS_HISTORY_COMPLETION(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), MIDORI_TYPE_HISTORY_COMPLETION))
#define MIDORI_IS_HISTORY_COMPLETION_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), MIDORI_TYPE_HISTORY_COMPLETION))
#define MIDORI_HISTORY_COMPLETION_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), MIDORI_TYPE_HISTORY_COMPLETION, MidoriHistoryCompletionClass))

typedef struct _MidoriHistoryCompletion MidoriHistoryCompletion;
typedef struct _MidoriHistoryCompletionClass MidoriHistoryCompletionClass;
typedef struct _MidoriHistoryCompletionPrivate MidoriHistoryCompletionPrivate;

#define MIDORI_TYPE_HISTORY_DATABASE (midori_history_database_get_type ())
#define MIDORI_HISTORY_DATABASE(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), MIDORI_TYPE_HISTORY_DATABASE, MidoriHistoryDatabase))
#define MIDORI_HISTORY_DATABASE_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), MIDORI_TYPE_HISTORY_DATABASE, MidoriHistoryDatabaseClass))
#define MIDORI_IS_HISTORY_DATABASE(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), MIDORI_TYPE_HISTORY_DATABASE))
#define MIDORI_IS_HISTORY_DATABASE_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), MIDORI_TYPE_HISTORY_DATABASE))
#define MIDORI_HISTORY_DATABASE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), MIDORI_TYPE_HISTORY_DATABASE, MidoriHistoryDatabaseClass))

typedef struct _MidoriHistoryDatabase MidoriHistoryDatabase;
typedef struct _MidoriHistoryDatabaseClass MidoriHistoryDatabaseClass;

#define MIDORI_TYPE_HISTORY_ITEM (midori_history_item_get_type ())
#define MIDORI_HISTORY_ITEM(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), MIDORI_TYPE_HISTORY_ITEM, MidoriHistoryItem))
#define MIDORI_HISTORY_ITEM_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), MIDORI_TYPE_HISTORY_ITEM, MidoriHistoryItemClass))
#define MIDORI_IS_HISTORY_ITEM(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), MIDORI_TYPE_HISTORY_ITEM))
#define MIDORI_IS_HISTORY_ITEM_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), MIDORI_TYPE_HISTORY_ITEM))
#define MIDORI_HISTORY_ITEM_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), MIDORI_TYPE_HISTORY_ITEM, MidoriHistoryItemClass))

typedef struct _MidoriHistoryItem MidoriHistoryItem;
typedef struct _MidoriHistoryItemClass MidoriHistoryItemClass;
typedef struct _MidoriHistoryItemPrivate MidoriHistoryItemPrivate;

#define MIDORI_TYPE_HISTORY_WEBSITE (midori_history_website_get_type ())
#define MIDORI_HISTORY_WEBSITE(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), MIDORI_TYPE_HISTORY_WEBSITE, MidoriHistoryWebsite))
#define MIDORI_HISTORY_WEBSITE_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), MIDORI_TYPE_HISTORY_WEBSITE, MidoriHistoryWebsiteClass))
#define MIDORI_IS_HISTORY_WEBSITE(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), MIDORI_TYPE_HISTORY_WEBSITE))
#define MIDORI_IS_HISTORY_WEBSITE_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), MIDORI_TYPE_HISTORY_WEBSITE))
#define MIDORI_HISTORY_WEBSITE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), MIDORI_TYPE_HISTORY_WEBSITE, MidoriHistoryWebsiteClass))

typedef struct _MidoriHistoryWebsite MidoriHistoryWebsite;
typedef struct _MidoriHistoryWebsiteClass MidoriHistoryWebsiteClass;
typedef struct _MidoriHistoryWebsitePrivate MidoriHistoryWebsitePrivate;

#define MIDORI_TYPE_HISTORY_SEARCH (midori_history_search_get_type ())
#define MIDORI_HISTORY_SEARCH(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), MIDORI_TYPE_HISTORY_SEARCH, MidoriHistorySearch))
#define MIDORI_HISTORY_SEARCH_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), MIDORI_TYPE_HISTORY_SEARCH, MidoriHistorySearchClass))
#define MIDORI_IS_HISTORY_SEARCH(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), MIDORI_TYPE_HISTORY_SEARCH))
#define MIDORI_IS_HISTORY_SEARCH_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), MIDORI_TYPE_HISTORY_SEARCH))
#define MIDORI_HISTORY_SEARCH_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), MIDORI_TYPE_HISTORY_SEARCH, MidoriHistorySearchClass))

typedef struct _MidoriHistorySearch MidoriHistorySearch;
typedef struct _MidoriHistorySearchClass MidoriHistorySearchClass;
typedef struct _MidoriHistorySearchPrivate MidoriHistorySearchPrivate;
typedef struct _MidoriHistoryDatabasePrivate MidoriHistoryDatabasePrivate;

#define MIDORI_TYPE_NOTEBOOK (midori_notebook_get_type ())
#define MIDORI_NOTEBOOK(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), MIDORI_TYPE_NOTEBOOK, MidoriNotebook))
#define MIDORI_NOTEBOOK_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), MIDORI_TYPE_NOTEBOOK, MidoriNotebookClass))
#define MIDORI_IS_NOTEBOOK(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), MIDORI_TYPE_NOTEBOOK))
#define MIDORI_IS_NOTEBOOK_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), MIDORI_TYPE_NOTEBOOK))
#define MIDORI_NOTEBOOK_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), MIDORI_TYPE_NOTEBOOK, MidoriNotebookClass))

typedef struct _MidoriNotebook MidoriNotebook;
typedef struct _MidoriNotebookClass MidoriNotebookClass;
typedef struct _MidoriNotebookPrivate MidoriNotebookPrivate;

#define MIDORI_TYPE_TAB (midori_tab_get_type ())
#define MIDORI_TAB(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), MIDORI_TYPE_TAB, MidoriTab))
#define MIDORI_TAB_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), MIDORI_TYPE_TAB, MidoriTabClass))
#define MIDORI_IS_TAB(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), MIDORI_TYPE_TAB))
#define MIDORI_IS_TAB_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), MIDORI_TYPE_TAB))
#define MIDORI_TAB_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), MIDORI_TYPE_TAB, MidoriTabClass))

typedef struct _MidoriTab MidoriTab;
typedef struct _MidoriTabClass MidoriTabClass;

#define MIDORI_TYPE_PANED_ACTION (midori_paned_action_get_type ())
#define MIDORI_PANED_ACTION(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), MIDORI_TYPE_PANED_ACTION, MidoriPanedAction))
#define MIDORI_PANED_ACTION_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), MIDORI_TYPE_PANED_ACTION, MidoriPanedActionClass))
#define MIDORI_IS_PANED_ACTION(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), MIDORI_TYPE_PANED_ACTION))
#define MIDORI_IS_PANED_ACTION_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), MIDORI_TYPE_PANED_ACTION))
#define MIDORI_PANED_ACTION_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), MIDORI_TYPE_PANED_ACTION, MidoriPanedActionClass))

typedef struct _MidoriPanedAction MidoriPanedAction;
typedef struct _MidoriPanedActionClass MidoriPanedActionClass;
typedef struct _MidoriPanedActionPrivate MidoriPanedActionPrivate;

#define MIDORI_TYPE_SEARCH_COMPLETION (midori_search_completion_get_type ())
#define MIDORI_SEARCH_COMPLETION(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), MIDORI_TYPE_SEARCH_COMPLETION, MidoriSearchCompletion))
#define MIDORI_SEARCH_COMPLETION_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), MIDORI_TYPE_SEARCH_COMPLETION, MidoriSearchCompletionClass))
#define MIDORI_IS_SEARCH_COMPLETION(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), MIDORI_TYPE_SEARCH_COMPLETION))
#define MIDORI_IS_SEARCH_COMPLETION_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), MIDORI_TYPE_SEARCH_COMPLETION))
#define MIDORI_SEARCH_COMPLETION_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), MIDORI_TYPE_SEARCH_COMPLETION, MidoriSearchCompletionClass))

typedef struct _MidoriSearchCompletion MidoriSearchCompletion;
typedef struct _MidoriSearchCompletionClass MidoriSearchCompletionClass;
typedef struct _MidoriSearchCompletionPrivate MidoriSearchCompletionPrivate;

#define MIDORI_TYPE_WINDOW_STATE (midori_window_state_get_type ())

#define MIDORI_TYPE_SETTINGS (midori_settings_get_type ())
#define MIDORI_SETTINGS(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), MIDORI_TYPE_SETTINGS, MidoriSettings))
#define MIDORI_SETTINGS_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), MIDORI_TYPE_SETTINGS, MidoriSettingsClass))
#define MIDORI_IS_SETTINGS(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), MIDORI_TYPE_SETTINGS))
#define MIDORI_IS_SETTINGS_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), MIDORI_TYPE_SETTINGS))
#define MIDORI_SETTINGS_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), MIDORI_TYPE_SETTINGS, MidoriSettingsClass))

typedef struct _MidoriSettings MidoriSettings;
typedef struct _MidoriSettingsClass MidoriSettingsClass;
typedef struct _MidoriSettingsPrivate MidoriSettingsPrivate;

#define MIDORI_TYPE_SPEED_DIAL (midori_speed_dial_get_type ())
#define MIDORI_SPEED_DIAL(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), MIDORI_TYPE_SPEED_DIAL, MidoriSpeedDial))
#define MIDORI_SPEED_DIAL_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), MIDORI_TYPE_SPEED_DIAL, MidoriSpeedDialClass))
#define MIDORI_IS_SPEED_DIAL(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), MIDORI_TYPE_SPEED_DIAL))
#define MIDORI_IS_SPEED_DIAL_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), MIDORI_TYPE_SPEED_DIAL))
#define MIDORI_SPEED_DIAL_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), MIDORI_TYPE_SPEED_DIAL, MidoriSpeedDialClass))

typedef struct _MidoriSpeedDial MidoriSpeedDial;
typedef struct _MidoriSpeedDialClass MidoriSpeedDialClass;
typedef struct _MidoriSpeedDialPrivate MidoriSpeedDialPrivate;

#define MIDORI_SPEED_DIAL_TYPE_SPEC (midori_speed_dial_spec_get_type ())
#define MIDORI_SPEED_DIAL_SPEC(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), MIDORI_SPEED_DIAL_TYPE_SPEC, MidoriSpeedDialSpec))
#define MIDORI_SPEED_DIAL_SPEC_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), MIDORI_SPEED_DIAL_TYPE_SPEC, MidoriSpeedDialSpecClass))
#define MIDORI_SPEED_DIAL_IS_SPEC(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), MIDORI_SPEED_DIAL_TYPE_SPEC))
#define MIDORI_SPEED_DIAL_IS_SPEC_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), MIDORI_SPEED_DIAL_TYPE_SPEC))
#define MIDORI_SPEED_DIAL_SPEC_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), MIDORI_SPEED_DIAL_TYPE_SPEC, MidoriSpeedDialSpecClass))

typedef struct _MidoriSpeedDialSpec MidoriSpeedDialSpec;
typedef struct _MidoriSpeedDialSpecClass MidoriSpeedDialSpecClass;
typedef struct _MidoriSpeedDialSpecPrivate MidoriSpeedDialSpecPrivate;

#define MIDORI_TYPE_NEW_VIEW (midori_new_view_get_type ())

#define MIDORI_TYPE_SECURITY (midori_security_get_type ())

#define MIDORI_TYPE_LOAD_STATUS (midori_load_status_get_type ())

#define MIDORI_TYPE_LOAD_ERROR (midori_load_error_get_type ())
typedef struct _MidoriTabPrivate MidoriTabPrivate;

#define MIDORI_TYPE_VIEWABLE (midori_viewable_get_type ())
#define MIDORI_VIEWABLE(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), MIDORI_TYPE_VIEWABLE, MidoriViewable))
#define MIDORI_IS_VIEWABLE(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), MIDORI_TYPE_VIEWABLE))
#define MIDORI_VIEWABLE_GET_INTERFACE(obj) (G_TYPE_INSTANCE_GET_INTERFACE ((obj), MIDORI_TYPE_VIEWABLE, MidoriViewableIface))

typedef struct _MidoriViewable MidoriViewable;
typedef struct _MidoriViewableIface MidoriViewableIface;

#define MIDORI_TYPE_VIEW_COMPLETION (midori_view_completion_get_type ())
#define MIDORI_VIEW_COMPLETION(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), MIDORI_TYPE_VIEW_COMPLETION, MidoriViewCompletion))
#define MIDORI_VIEW_COMPLETION_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), MIDORI_TYPE_VIEW_COMPLETION, MidoriViewCompletionClass))
#define MIDORI_IS_VIEW_COMPLETION(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), MIDORI_TYPE_VIEW_COMPLETION))
#define MIDORI_IS_VIEW_COMPLETION_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), MIDORI_TYPE_VIEW_COMPLETION))
#define MIDORI_VIEW_COMPLETION_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), MIDORI_TYPE_VIEW_COMPLETION, MidoriViewCompletionClass))

typedef struct _MidoriViewCompletion MidoriViewCompletion;
typedef struct _MidoriViewCompletionClass MidoriViewCompletionClass;
typedef struct _MidoriViewCompletionPrivate MidoriViewCompletionPrivate;

#define MIDORI_TYPE_WINDOW (midori_window_get_type ())
#define MIDORI_WINDOW(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), MIDORI_TYPE_WINDOW, MidoriWindow))
#define MIDORI_WINDOW_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), MIDORI_TYPE_WINDOW, MidoriWindowClass))
#define MIDORI_IS_WINDOW(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), MIDORI_TYPE_WINDOW))
#define MIDORI_IS_WINDOW_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), MIDORI_TYPE_WINDOW))
#define MIDORI_WINDOW_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), MIDORI_TYPE_WINDOW, MidoriWindowClass))

typedef struct _MidoriWindow MidoriWindow;
typedef struct _MidoriWindowClass MidoriWindowClass;
typedef struct _MidoriWindowPrivate MidoriWindowPrivate;

struct _KatzeSeparatorAction {
	GtkAction parent_instance;
	KatzeSeparatorActionPrivate * priv;
};

struct _KatzeSeparatorActionClass {
	GtkActionClass parent_class;
};

struct _MidoriHSTS {
	GObject parent_instance;
	MidoriHSTSPrivate * priv;
};

struct _MidoriHSTSClass {
	GObjectClass parent_class;
};

struct _MidoriHSTSDirective {
	GTypeInstance parent_instance;
	volatile int ref_count;
	MidoriHSTSDirectivePrivate * priv;
	SoupDate* expires;
	gboolean sub_domains;
};

struct _MidoriHSTSDirectiveClass {
	GTypeClass parent_class;
	void (*finalize) (MidoriHSTSDirective *self);
};

typedef enum  {
	MIDORI_RUNTIME_MODE_UNDEFINED,
	MIDORI_RUNTIME_MODE_NORMAL,
	MIDORI_RUNTIME_MODE_APP,
	MIDORI_RUNTIME_MODE_PRIVATE,
	MIDORI_RUNTIME_MODE_PORTABLE
} MidoriRuntimeMode;

struct _MidoriURI {
	GObject parent_instance;
	MidoriURIPrivate * priv;
};

struct _MidoriURIClass {
	GObjectClass parent_class;
};

struct _MidoriURIIcon {
	GInitiallyUnowned parent_instance;
	MidoriURIIconPrivate * priv;
};

struct _MidoriURIIconClass {
	GInitiallyUnownedClass parent_class;
};

typedef enum  {
	MIDORI_DATABASE_ERROR_OPEN,
	MIDORI_DATABASE_ERROR_NAMING,
	MIDORI_DATABASE_ERROR_FILENAME,
	MIDORI_DATABASE_ERROR_EXECUTE,
	MIDORI_DATABASE_ERROR_COMPILE,
	MIDORI_DATABASE_ERROR_TYPE
} MidoriDatabaseError;
#define MIDORI_DATABASE_ERROR midori_database_error_quark ()
struct _MidoriDatabase {
	GObject parent_instance;
	MidoriDatabasePrivate * priv;
	gboolean trace;
	sqlite3* _db;
};

struct _MidoriDatabaseClass {
	GObjectClass parent_class;
	gboolean (*init) (MidoriDatabase* self, GCancellable* cancellable, GError** error);
};

struct _MidoriBookmarksDatabase {
	MidoriDatabase parent_instance;
	MidoriBookmarksDatabasePrivate * priv;
};

struct _MidoriBookmarksDatabaseClass {
	MidoriDatabaseClass parent_class;
};

struct _MidoriSuggestion {
	GObject parent_instance;
	MidoriSuggestionPrivate * priv;
};

struct _MidoriSuggestionClass {
	GObjectClass parent_class;
};

struct _MidoriCompletion {
	GObject parent_instance;
	MidoriCompletionPrivate * priv;
};

struct _MidoriCompletionClass {
	GObjectClass parent_class;
	void (*prepare) (MidoriCompletion* self, GObject* app);
	gboolean (*can_complete) (MidoriCompletion* self, const gchar* prefix);
	gboolean (*can_action) (MidoriCompletion* self, const gchar* action);
	void (*complete) (MidoriCompletion* self, const gchar* text, const gchar* action, GCancellable* cancellable, GAsyncReadyCallback _callback_, gpointer _user_data_);
	GList* (*complete_finish) (MidoriCompletion* self, GAsyncResult* _res_);
};

struct _MidoriAutocompleter {
	GObject parent_instance;
	MidoriAutocompleterPrivate * priv;
};

struct _MidoriAutocompleterClass {
	GObjectClass parent_class;
};

typedef enum  {
	MIDORI_AUTOCOMPLETER_COLUMNS_ICON,
	MIDORI_AUTOCOMPLETER_COLUMNS_URI,
	MIDORI_AUTOCOMPLETER_COLUMNS_MARKUP,
	MIDORI_AUTOCOMPLETER_COLUMNS_BACKGROUND,
	MIDORI_AUTOCOMPLETER_COLUMNS_YALIGN,
	MIDORI_AUTOCOMPLETER_COLUMNS_SIZE,
	MIDORI_AUTOCOMPLETER_COLUMNS_PRIORITY,
	MIDORI_AUTOCOMPLETER_COLUMNS_N
} MidoriAutocompleterColumns;

struct _MidoriContextAction {
	GtkAction parent_instance;
	MidoriContextActionPrivate * priv;
};

struct _MidoriContextActionClass {
	GtkActionClass parent_class;
};

typedef void (*MidoriContextActionActionActivateCallback) (GtkAction* action, void* user_data);
struct _MidoriSeparatorContextAction {
	MidoriContextAction parent_instance;
	MidoriSeparatorContextActionPrivate * priv;
};

struct _MidoriSeparatorContextActionClass {
	MidoriContextActionClass parent_class;
};

typedef gboolean (*MidoriDatabaseCallback) (void* user_data, GError** error);
struct _MidoriDatabaseStatement {
	GObject parent_instance;
	MidoriDatabaseStatementPrivate * priv;
	sqlite3_stmt* _stmt;
};

struct _MidoriDatabaseStatementClass {
	GObjectClass parent_class;
	gboolean (*init) (MidoriDatabaseStatement* self, GCancellable* cancellable, GError** error);
};

struct _MidoriTestJob {
	GObject parent_instance;
	MidoriTestJobPrivate * priv;
};

struct _MidoriTestJobClass {
	GObjectClass parent_class;
	void (*run) (MidoriTestJob* self, GCancellable* cancellable, GAsyncReadyCallback _callback_, gpointer _user_data_);
	void (*run_finish) (MidoriTestJob* self, GAsyncResult* _res_, GError** error);
};

struct _MidoriFileChooserDialog {
	GtkFileChooserDialog parent_instance;
	MidoriFileChooserDialogPrivate * priv;
};

struct _MidoriFileChooserDialogClass {
	GtkFileChooserDialogClass parent_class;
};

struct _MidoriExtensionsColumn {
	GtkTreeViewColumn parent_instance;
	MidoriExtensionsColumnPrivate * priv;
};

struct _MidoriExtensionsColumnClass {
	GtkTreeViewColumnClass parent_class;
};

struct _MidoriHistoryCompletion {
	MidoriCompletion parent_instance;
	MidoriHistoryCompletionPrivate * priv;
	MidoriHistoryDatabase* database;
};

struct _MidoriHistoryCompletionClass {
	MidoriCompletionClass parent_class;
};

struct _MidoriHistoryItem {
	GObject parent_instance;
	MidoriHistoryItemPrivate * priv;
};

struct _MidoriHistoryItemClass {
	GObjectClass parent_class;
};

struct _MidoriHistoryWebsite {
	MidoriHistoryItem parent_instance;
	MidoriHistoryWebsitePrivate * priv;
};

struct _MidoriHistoryWebsiteClass {
	MidoriHistoryItemClass parent_class;
};

struct _MidoriHistorySearch {
	MidoriHistoryItem parent_instance;
	MidoriHistorySearchPrivate * priv;
};

struct _MidoriHistorySearchClass {
	MidoriHistoryItemClass parent_class;
};

struct _MidoriHistoryDatabase {
	MidoriDatabase parent_instance;
	MidoriHistoryDatabasePrivate * priv;
};

struct _MidoriHistoryDatabaseClass {
	MidoriDatabaseClass parent_class;
};

struct _MidoriNotebook {
	GtkEventBox parent_instance;
	MidoriNotebookPrivate * priv;
	GtkNotebook* notebook;
};

struct _MidoriNotebookClass {
	GtkEventBoxClass parent_class;
};

struct _MidoriPanedAction {
	GtkAction parent_instance;
	MidoriPanedActionPrivate * priv;
};

struct _MidoriPanedActionClass {
	GtkActionClass parent_class;
};

struct _MidoriSearchCompletion {
	MidoriCompletion parent_instance;
	MidoriSearchCompletionPrivate * priv;
};

struct _MidoriSearchCompletionClass {
	MidoriCompletionClass parent_class;
};

typedef enum  {
	MIDORI_WINDOW_NORMAL,
	MIDORI_WINDOW_MINIMIZED,
	MIDORI_WINDOW_MAXIMIZED,
	MIDORI_WINDOW_FULLSCREEN
} MidoriWindowState;

struct _MidoriSettings {
	WebKitWebSettings parent_instance;
	MidoriSettingsPrivate * priv;
};

struct _MidoriSettingsClass {
	WebKitWebSettingsClass parent_class;
};

typedef enum  {
	MIDORI_SPEED_DIAL_ERROR_INVALID_MESSAGE,
	MIDORI_SPEED_DIAL_ERROR_NO_ACTION,
	MIDORI_SPEED_DIAL_ERROR_NO_ID,
	MIDORI_SPEED_DIAL_ERROR_NO_URL,
	MIDORI_SPEED_DIAL_ERROR_NO_TITLE,
	MIDORI_SPEED_DIAL_ERROR_NO_ID2,
	MIDORI_SPEED_DIAL_ERROR_INVALID_ACTION
} MidoriSpeedDialError;
#define MIDORI_SPEED_DIAL_ERROR midori_speed_dial_error_quark ()
struct _MidoriSpeedDial {
	GObject parent_instance;
	MidoriSpeedDialPrivate * priv;
	GKeyFile* keyfile;
};

struct _MidoriSpeedDialClass {
	GObjectClass parent_class;
};

struct _MidoriSpeedDialSpec {
	GTypeInstance parent_instance;
	volatile int ref_count;
	MidoriSpeedDialSpecPrivate * priv;
	gchar* dial_id;
	gchar* uri;
};

struct _MidoriSpeedDialSpecClass {
	GTypeClass parent_class;
	void (*finalize) (MidoriSpeedDialSpec *self);
};

typedef enum  {
	MIDORI_NEW_VIEW_TAB,
	MIDORI_NEW_VIEW_BACKGROUND,
	MIDORI_NEW_VIEW_WINDOW
} MidoriNewView;

typedef enum  {
	MIDORI_SECURITY_NONE,
	MIDORI_SECURITY_UNKNOWN,
	MIDORI_SECURITY_TRUSTED
} MidoriSecurity;

typedef enum  {
	MIDORI_LOAD_FINISHED,
	MIDORI_LOAD_COMMITTED,
	MIDORI_LOAD_PROVISIONAL
} MidoriLoadStatus;

typedef enum  {
	MIDORI_LOAD_ERROR_NONE,
	MIDORI_LOAD_ERROR_DELAYED,
	MIDORI_LOAD_ERROR_SECURITY,
	MIDORI_LOAD_ERROR_CRASH,
	MIDORI_LOAD_ERROR_NETWORK
} MidoriLoadError;

struct _MidoriTab {
	GtkVBox parent_instance;
	MidoriTabPrivate * priv;
};

struct _MidoriTabClass {
	GtkVBoxClass parent_class;
};

struct _MidoriViewableIface {
	GTypeInterface parent_iface;
	const gchar* (*get_stock_id) (MidoriViewable* self);
	const gchar* (*get_label) (MidoriViewable* self);
	GtkWidget* (*get_toolbar) (MidoriViewable* self);
};

struct _MidoriViewCompletion {
	MidoriCompletion parent_instance;
	MidoriViewCompletionPrivate * priv;
};

struct _MidoriViewCompletionClass {
	MidoriCompletionClass parent_class;
};

struct _MidoriWindow {
	GtkWindow parent_instance;
	MidoriWindowPrivate * priv;
};

struct _MidoriWindowClass {
	GtkWindowClass parent_class;
};


GType katze_separator_action_get_type (void) G_GNUC_CONST;
KatzeSeparatorAction* katze_separator_action_new (void);
KatzeSeparatorAction* katze_separator_action_construct (GType object_type);
GType midori_hsts_get_type (void) G_GNUC_CONST;
MidoriHSTS* midori_hsts_new (void);
MidoriHSTS* midori_hsts_construct (GType object_type);
gpointer midori_hsts_directive_ref (gpointer instance);
void midori_hsts_directive_unref (gpointer instance);
GParamSpec* midori_hsts_param_spec_directive (const gchar* name,
                                              const gchar* nick,
                                              const gchar* blurb,
                                              GType object_type,
                                              GParamFlags flags);
void midori_hsts_value_set_directive (GValue* value,
                                      gpointer v_object);
void midori_hsts_value_take_directive (GValue* value,
                                       gpointer v_object);
gpointer midori_hsts_value_get_directive (const GValue* value);
GType midori_hsts_directive_get_type (void) G_GNUC_CONST;
MidoriHSTSDirective* midori_hsts_directive_new (const gchar* max_age,
                                                gboolean include_sub_domains);
MidoriHSTSDirective* midori_hsts_directive_construct (GType object_type,
                                                      const gchar* max_age,
                                                      gboolean include_sub_domains);
MidoriHSTSDirective* midori_hsts_directive_new_from_header (const gchar* header);
MidoriHSTSDirective* midori_hsts_directive_construct_from_header (GType object_type,
                                                                  const gchar* header);
gboolean midori_hsts_directive_is_expired (MidoriHSTSDirective* self);
gboolean midori_hsts_directive_is_valid (MidoriHSTSDirective* self);
GType midori_runtime_mode_get_type (void) G_GNUC_CONST;
void midori_paths_test_reset_runtime_mode (void);
gchar* midori_paths_get_config_dir_for_reading (void);
gchar* midori_paths_get_config_filename_for_reading (const gchar* filename);
gboolean midori_paths_is_readonly (void);
MidoriRuntimeMode midori_paths_get_runtime_mode (void);
const gchar* midori_paths_get_runtime_dir (void);
void midori_paths_init (MidoriRuntimeMode new_mode,
                        const gchar* config);
void midori_paths_mkdir_with_parents (const gchar* path,
                                      gint mode);
void midori_paths_remove_path (const gchar* path);
const gchar* midori_paths_get_config_dir_for_writing (void);
gchar* midori_paths_get_extension_config_dir (const gchar* extension);
gchar* midori_paths_get_extension_preset_filename (const gchar* extension,
                                                   const gchar* filename);
gchar* midori_paths_get_config_filename_for_writing (const gchar* filename);
const gchar* midori_paths_get_cache_dir (void);
const gchar* midori_paths_get_user_data_dir (void);
const gchar* midori_paths_get_user_data_dir_for_reading (void);
const gchar* midori_paths_get_cache_dir_for_reading (void);
const gchar* midori_paths_get_tmp_dir (void);
gchar* midori_paths_make_tmp_dir (const gchar* tmpl);
void midori_paths_init_exec_path (gchar** new_command_line,
                                  int new_command_line_length1);
gchar** midori_paths_get_command_line (int* result_length1);
gchar* midori_paths_get_command_line_str (gboolean for_display);
gchar* midori_paths_get_lib_path (const gchar* package);
gchar* midori_paths_get_res_filename (const gchar* filename);
gchar* midori_paths_get_data_filename (const gchar* filename,
                                       gboolean res);
gchar* midori_paths_get_preset_filename (const gchar* folder,
                                         const gchar* filename);
void midori_paths_clear_icons (void);
GdkPixbuf* midori_paths_get_icon (const gchar* uri,
                                  GtkWidget* widget);
GType midori_uri_get_type (void) G_GNUC_CONST;
gchar* midori_uri_parse_hostname (const gchar* uri,
                                  gchar* * path);
gchar* midori_uri_parse (const gchar* uri,
                         gchar* * path);
gchar* midori_uri_to_ascii (const gchar* uri);
gchar* midori_uri_get_base_domain (const gchar* uri);
gchar* midori_uri_unescape (const gchar* uri_str);
gchar* midori_uri_strip_prefix_for_display (const gchar* uri);
gchar* midori_uri_format_for_display (const gchar* uri);
gchar* midori_uri_for_search (const gchar* uri,
                              const gchar* keywords);
gboolean midori_uri_is_blank (const gchar* uri);
gboolean midori_uri_is_http (const gchar* uri);
gboolean midori_uri_is_resource (const gchar* uri);
gboolean midori_uri_is_location (const gchar* uri);
gboolean midori_uri_is_ip_address (const gchar* uri);
gboolean midori_uri_is_valid (const gchar* uri);
gchar* midori_uri_get_folder (const gchar* uri);
GChecksumType midori_uri_get_fingerprint (const gchar* uri,
                                          gchar* * checksum,
                                          gchar* * label);
gboolean midori_uri_recursive_fork_protection (const gchar* uri,
                                               gboolean set_uri);
void midori_uri_get_icon (const gchar* uri,
                          GCancellable* cancellable,
                          GAsyncReadyCallback _callback_,
                          gpointer _user_data_);
GIcon* midori_uri_get_icon_finish (GAsyncResult* _res_,
                                   GError** error);
void midori_uri_get_icon_fallback (const gchar* uri,
                                   GIcon* fallback,
                                   GCancellable* cancellable,
                                   GAsyncReadyCallback _callback_,
                                   gpointer _user_data_);
GIcon* midori_uri_get_icon_fallback_finish (GAsyncResult* _res_);
MidoriURI* midori_uri_new (void);
MidoriURI* midori_uri_construct (GType object_type);
GType midori_uri_icon_get_type (void) G_GNUC_CONST;
MidoriURIIcon* midori_uri_icon_new (const gchar* website_uri,
                                    GIcon* fallback);
MidoriURIIcon* midori_uri_icon_construct (GType object_type,
                                          const gchar* website_uri,
                                          GIcon* fallback);
const gchar* midori_uri_icon_get_uri (MidoriURIIcon* self);
GIcon* midori_uri_icon_get_fallback (MidoriURIIcon* self);
GType midori_database_get_type (void) G_GNUC_CONST;
GQuark midori_database_error_quark (void);
GType midori_bookmarks_database_get_type (void) G_GNUC_CONST;
MidoriBookmarksDatabase* midori_bookmarks_database_new (GError** error);
MidoriBookmarksDatabase* midori_bookmarks_database_construct (GType object_type,
                                                              GError** error);
void midori_bookmarks_database_preinit (MidoriBookmarksDatabase* self,
                                        GError** error);
GType midori_suggestion_get_type (void) G_GNUC_CONST;
MidoriSuggestion* midori_suggestion_new (const gchar* uri,
                                         const gchar* markup,
                                         gboolean use_markup,
                                         const gchar* background,
                                         GIcon* icon,
                                         gint* priority);
MidoriSuggestion* midori_suggestion_construct (GType object_type,
                                               const gchar* uri,
                                               const gchar* markup,
                                               gboolean use_markup,
                                               const gchar* background,
                                               GIcon* icon,
                                               gint* priority);
const gchar* midori_suggestion_get_uri (MidoriSuggestion* self);
void midori_suggestion_set_uri (MidoriSuggestion* self,
                                const gchar* value);
const gchar* midori_suggestion_get_markup (MidoriSuggestion* self);
void midori_suggestion_set_markup (MidoriSuggestion* self,
                                   const gchar* value);
gboolean midori_suggestion_get_use_markup (MidoriSuggestion* self);
void midori_suggestion_set_use_markup (MidoriSuggestion* self,
                                       gboolean value);
const gchar* midori_suggestion_get_background (MidoriSuggestion* self);
void midori_suggestion_set_background (MidoriSuggestion* self,
                                       const gchar* value);
GIcon* midori_suggestion_get_icon (MidoriSuggestion* self);
void midori_suggestion_set_icon (MidoriSuggestion* self,
                                 GIcon* value);
gboolean midori_suggestion_get_action (MidoriSuggestion* self);
void midori_suggestion_set_action (MidoriSuggestion* self,
                                   gboolean value);
gint midori_suggestion_get_priority (MidoriSuggestion* self);
void midori_suggestion_set_priority (MidoriSuggestion* self,
                                     gint value);
GType midori_completion_get_type (void) G_GNUC_CONST;
void midori_completion_prepare (MidoriCompletion* self,
                                GObject* app);
gboolean midori_completion_can_complete (MidoriCompletion* self,
                                         const gchar* prefix);
gboolean midori_completion_can_action (MidoriCompletion* self,
                                       const gchar* action);
void midori_completion_complete (MidoriCompletion* self,
                                 const gchar* text,
                                 const gchar* action,
                                 GCancellable* cancellable,
                                 GAsyncReadyCallback _callback_,
                                 gpointer _user_data_);
GList* midori_completion_complete_finish (MidoriCompletion* self,
                                          GAsyncResult* _res_);
MidoriCompletion* midori_completion_construct (GType object_type);
const gchar* midori_completion_get_description (MidoriCompletion* self);
void midori_completion_set_description (MidoriCompletion* self,
                                        const gchar* value);
gint midori_completion_get_max_items (MidoriCompletion* self);
GType midori_autocompleter_get_type (void) G_GNUC_CONST;
GType midori_autocompleter_columns_get_type (void) G_GNUC_CONST;
MidoriAutocompleter* midori_autocompleter_new (GObject* app);
MidoriAutocompleter* midori_autocompleter_construct (GType object_type,
                                                     GObject* app);
void midori_autocompleter_add (MidoriAutocompleter* self,
                               MidoriCompletion* completion);
gboolean midori_autocompleter_can_complete (MidoriAutocompleter* self,
                                            const gchar* text);
void midori_autocompleter_complete (MidoriAutocompleter* self,
                                    const gchar* text,
                                    GAsyncReadyCallback _callback_,
                                    gpointer _user_data_);
void midori_autocompleter_complete_finish (MidoriAutocompleter* self,
                                           GAsyncResult* _res_);
gboolean midori_autocompleter_can_action (MidoriAutocompleter* self,
                                          const gchar* action);
void midori_autocompleter_action (MidoriAutocompleter* self,
                                  const gchar* action,
                                  const gchar* text,
                                  GAsyncReadyCallback _callback_,
                                  gpointer _user_data_);
void midori_autocompleter_action_finish (MidoriAutocompleter* self,
                                         GAsyncResult* _res_);
GtkListStore* midori_autocompleter_get_model (MidoriAutocompleter* self);
GType midori_context_action_get_type (void) G_GNUC_CONST;
MidoriContextAction* midori_context_action_new (const gchar* name,
                                                const gchar* label,
                                                const gchar* tooltip,
                                                const gchar* stock_id);
MidoriContextAction* midori_context_action_construct (GType object_type,
                                                      const gchar* name,
                                                      const gchar* label,
                                                      const gchar* tooltip,
                                                      const gchar* stock_id);
MidoriContextAction* midori_context_action_new_escaped (const gchar* name,
                                                        const gchar* label,
                                                        const gchar* tooltip,
                                                        const gchar* stock_id);
MidoriContextAction* midori_context_action_construct_escaped (GType object_type,
                                                              const gchar* name,
                                                              const gchar* label,
                                                              const gchar* tooltip,
                                                              const gchar* stock_id);
void midori_context_action_add_simple (MidoriContextAction* self,
                                       const gchar* name,
                                       const gchar* label,
                                       const gchar* tooltip,
                                       const gchar* stock_id,
                                       MidoriContextActionActionActivateCallback callback,
                                       void* callback_target);
void midori_context_action_add (MidoriContextAction* self,
                                GtkAction* action);
void midori_context_action_add_action_group (MidoriContextAction* self,
                                             GtkActionGroup* action_group);
void midori_context_action_add_by_name (MidoriContextAction* self,
                                        const gchar* name);
GtkMenu* midori_context_action_create_menu (MidoriContextAction* self,
                                            GtkMenu* default_menu,
                                            gboolean accels);
GtkAction* midori_context_action_get_by_name (MidoriContextAction* self,
                                              const gchar* name);
GType midori_separator_context_action_get_type (void) G_GNUC_CONST;
MidoriSeparatorContextAction* midori_separator_context_action_new (void);
MidoriSeparatorContextAction* midori_separator_context_action_construct (GType object_type);
GType midori_database_statement_get_type (void) G_GNUC_CONST;
MidoriDatabaseStatement* midori_database_statement_new (MidoriDatabase* database,
                                                        const gchar* query,
                                                        GError** error);
MidoriDatabaseStatement* midori_database_statement_construct (GType object_type,
                                                              MidoriDatabase* database,
                                                              const gchar* query,
                                                              GError** error);
gboolean midori_database_statement_init (MidoriDatabaseStatement* self,
                                         GCancellable* cancellable,
                                         GError** error);
void midori_database_statement_bind (MidoriDatabaseStatement* self,
                                     const gchar* pname,
                                     GError** error,
                                     ...);
gboolean midori_database_statement_exec (MidoriDatabaseStatement* self,
                                         GError** error);
gboolean midori_database_statement_step (MidoriDatabaseStatement* self,
                                         GError** error);
gint64 midori_database_statement_row_id (MidoriDatabaseStatement* self,
                                         GError** error);
gchar* midori_database_statement_get_string (MidoriDatabaseStatement* self,
                                             const gchar* name,
                                             GError** error);
gint64 midori_database_statement_get_int64 (MidoriDatabaseStatement* self,
                                            const gchar* name,
                                            GError** error);
gdouble midori_database_statement_get_double (MidoriDatabaseStatement* self,
                                              const gchar* name,
                                              GError** error);
sqlite3_stmt* midori_database_statement_get_stmt (MidoriDatabaseStatement* self);
MidoriDatabase* midori_database_statement_get_database (MidoriDatabaseStatement* self);
void midori_database_statement_set_database (MidoriDatabaseStatement* self,
                                             MidoriDatabase* value);
const gchar* midori_database_statement_get_query (MidoriDatabaseStatement* self);
void midori_database_statement_set_query (MidoriDatabaseStatement* self,
                                          const gchar* value);
MidoriDatabase* midori_database_new (const gchar* path,
                                     GError** error);
MidoriDatabase* midori_database_construct (GType object_type,
                                           const gchar* path,
                                           GError** error);
gboolean midori_database_init (MidoriDatabase* self,
                               GCancellable* cancellable,
                               GError** error);
gboolean midori_database_exists (MidoriDatabase* self,
                                 const gchar* path);
gboolean midori_database_attach (MidoriDatabase* self,
                                 const gchar* path,
                                 const gchar* alias,
                                 GError** error);
gboolean midori_database_exec_script (MidoriDatabase* self,
                                      const gchar* filename,
                                      GError** error);
gboolean midori_database_transaction (MidoriDatabase* self,
                                      MidoriDatabaseCallback callback,
                                      void* callback_target,
                                      GError** error);
gboolean midori_database_exec (MidoriDatabase* self,
                               const gchar* query,
                               GError** error);
MidoriDatabaseStatement* midori_database_prepare (MidoriDatabase* self,
                                                  const gchar* query,
                                                  GError** error,
                                                  ...);
sqlite3* midori_database_get_db (MidoriDatabase* self);
const gchar* midori_database_get_path (MidoriDatabase* self);
void midori_database_set_path (MidoriDatabase* self,
                               const gchar* value);
gboolean midori_database_get_first_use (MidoriDatabase* self);
void midori_database_set_first_use (MidoriDatabase* self,
                                    gboolean value);
guint midori_timeout_add_seconds (guint interval,
                                  GSourceFunc function,
                                  void* function_target,
                                  GDestroyNotify function_target_destroy_notify);
guint midori_timeout_add (guint interval,
                          GSourceFunc function,
                          void* function_target,
                          GDestroyNotify function_target_destroy_notify);
void midori_test_init (int* args_length1,
                       gchar*** args);
void midori_test_grab_max_timeout (void);
void midori_test_release_max_timeout (void);
void midori_test_idle_timeouts (void);
GType midori_test_job_get_type (void) G_GNUC_CONST;
void midori_test_job_run (MidoriTestJob* self,
                          GCancellable* cancellable,
                          GAsyncReadyCallback _callback_,
                          gpointer _user_data_);
void midori_test_job_run_finish (MidoriTestJob* self,
                                 GAsyncResult* _res_,
                                 GError** error);
void midori_test_job_run_sync (MidoriTestJob* self);
MidoriTestJob* midori_test_job_construct (GType object_type);
void midori_test_log_set_fatal_handler_for_icons (void);
void midori_test_set_dialog_response (GtkResponseType response);
void midori_test_set_file_chooser_filename (const gchar* filename);
void midori_show_message_dialog (GtkMessageType type,
                                 const gchar* _short_,
                                 const gchar* detailed,
                                 gboolean modal);
GType midori_file_chooser_dialog_get_type (void) G_GNUC_CONST;
MidoriFileChooserDialog* midori_file_chooser_dialog_new (const gchar* title,
                                                         GtkWindow* window,
                                                         GtkFileChooserAction action);
MidoriFileChooserDialog* midori_file_chooser_dialog_construct (GType object_type,
                                                               const gchar* title,
                                                               GtkWindow* window,
                                                               GtkFileChooserAction action);
gint midori_dialog_run (GtkDialog* dialog);
gboolean midori_download_is_finished (WebKitDownload* download);
gint midori_download_get_type (WebKitDownload* download);
void midori_download_set_type (WebKitDownload* download,
                               gint type);
gdouble midori_download_get_progress (WebKitDownload* download);
gchar* midori_download_calculate_tooltip (WebKitDownload* download);
gchar* midori_download_get_content_type (WebKitDownload* download,
                                         const gchar* mime_type);
gboolean midori_download_has_wrong_checksum (WebKitDownload* download);
gboolean midori_download_action_clear (WebKitDownload* download,
                                       GtkWidget* widget,
                                       GError** error);
gchar* midori_download_action_stock_id (WebKitDownload* download);
gboolean midori_download_open (WebKitDownload* download,
                               GtkWidget* widget,
                               GError** error);
const gchar* midori_download_fallback_extension (const gchar* extension,
                                                 const gchar* mime_type);
gchar* midori_download_clean_filename (const gchar* filename);
gchar* midori_download_get_suggested_filename (WebKitDownload* download);
gchar* midori_download_get_filename_suggestion_for_uri (const gchar* mime_type,
                                                        const gchar* uri);
gchar* midori_download_get_extension_for_uri (const gchar* uri,
                                              gchar* * basename);
gchar* midori_download_get_unique_filename (const gchar* filename);
gchar* midori_download_get_basename_for_display (const gchar* uri);
gchar* midori_download_prepare_destination_uri (WebKitDownload* download,
                                                const gchar* folder);
gboolean midori_download_has_enough_space (WebKitDownload* download,
                                           const gchar* destination_uri,
                                           gboolean quiet);
GType midori_extensions_column_get_type (void) G_GNUC_CONST;
MidoriExtensionsColumn* midori_extensions_column_new (void);
MidoriExtensionsColumn* midori_extensions_column_construct (GType object_type);
GType midori_history_completion_get_type (void) G_GNUC_CONST;
GType midori_history_database_get_type (void) G_GNUC_CONST;
MidoriHistoryCompletion* midori_history_completion_new (void);
MidoriHistoryCompletion* midori_history_completion_construct (GType object_type);
GType midori_history_item_get_type (void) G_GNUC_CONST;
GType midori_history_website_get_type (void) G_GNUC_CONST;
MidoriHistoryWebsite* midori_history_website_new (const gchar* uri,
                                                  const gchar* title,
                                                  gint64 date);
MidoriHistoryWebsite* midori_history_website_construct (GType object_type,
                                                        const gchar* uri,
                                                        const gchar* title,
                                                        gint64 date);
const gchar* midori_history_website_get_uri (MidoriHistoryWebsite* self);
void midori_history_website_set_uri (MidoriHistoryWebsite* self,
                                     const gchar* value);
GType midori_history_search_get_type (void) G_GNUC_CONST;
MidoriHistorySearch* midori_history_search_new (const gchar* uri,
                                                const gchar* keywords,
                                                gint64 date);
MidoriHistorySearch* midori_history_search_construct (GType object_type,
                                                      const gchar* uri,
                                                      const gchar* keywords,
                                                      gint64 date);
const gchar* midori_history_search_get_uri (MidoriHistorySearch* self);
void midori_history_search_set_uri (MidoriHistorySearch* self,
                                    const gchar* value);
const gchar* midori_history_search_get_keywords (MidoriHistorySearch* self);
void midori_history_search_set_keywords (MidoriHistorySearch* self,
                                         const gchar* value);
MidoriHistoryItem* midori_history_item_new (void);
MidoriHistoryItem* midori_history_item_construct (GType object_type);
const gchar* midori_history_item_get_title (MidoriHistoryItem* self);
void midori_history_item_set_title (MidoriHistoryItem* self,
                                    const gchar* value);
gint64 midori_history_item_get_date (MidoriHistoryItem* self);
void midori_history_item_set_date (MidoriHistoryItem* self,
                                   gint64 value);
MidoriHistoryDatabase* midori_history_database_new (GObject* app,
                                                    GError** error);
MidoriHistoryDatabase* midori_history_database_construct (GType object_type,
                                                          GObject* app,
                                                          GError** error);
void midori_history_database_query (MidoriHistoryDatabase* self,
                                    const gchar* sqlcmd,
                                    const gchar* filter,
                                    gint64 day,
                                    gint64 max_items,
                                    GCancellable* cancellable,
                                    GAsyncReadyCallback _callback_,
                                    gpointer _user_data_);
GList* midori_history_database_query_finish (MidoriHistoryDatabase* self,
                                             GAsyncResult* _res_);
void midori_history_database_list_by_count_with_bookmarks (MidoriHistoryDatabase* self,
                                                           const gchar* filter,
                                                           gint max_items,
                                                           GCancellable* cancellable,
                                                           GAsyncReadyCallback _callback_,
                                                           gpointer _user_data_);
GList* midori_history_database_list_by_count_with_bookmarks_finish (MidoriHistoryDatabase* self,
                                                                    GAsyncResult* _res_);
gboolean midori_history_database_insert (MidoriHistoryDatabase* self,
                                         const gchar* uri,
                                         const gchar* title,
                                         gint64 date,
                                         gint64 day,
                                         GError** error);
gboolean midori_history_database_clear (MidoriHistoryDatabase* self,
                                        gint64 maximum_age,
                                        GError** error);
GType midori_notebook_get_type (void) G_GNUC_CONST;
GtkWidget* midori_notebook_new (void);
GtkWidget* midori_notebook_construct (GType object_type);
MidoriContextAction* midori_notebook_get_context_action (MidoriNotebook* self);
GType midori_tab_get_type (void) G_GNUC_CONST;
void midori_notebook_insert (MidoriNotebook* self,
                             MidoriTab* tab,
                             gint index);
MidoriContextAction* midori_notebook_get_tab_context_action (MidoriNotebook* self,
                                                             MidoriTab* tab);
void midori_notebook_move (MidoriNotebook* self,
                           MidoriTab* tab,
                           gint index);
void midori_notebook_remove (MidoriNotebook* self,
                             MidoriTab* tab);
MidoriTab* midori_notebook_get_nth_tab (MidoriNotebook* self,
                                        gint index);
gint midori_notebook_get_tab_index (MidoriNotebook* self,
                                    MidoriTab* tab);
guint midori_notebook_get_count (MidoriNotebook* self);
gint midori_notebook_get_index (MidoriNotebook* self);
void midori_notebook_set_index (MidoriNotebook* self,
                                gint value);
MidoriTab* midori_notebook_get_tab (MidoriNotebook* self);
void midori_notebook_set_tab (MidoriNotebook* self,
                              MidoriTab* value);
gboolean midori_notebook_get_close_buttons_left (MidoriNotebook* self);
void midori_notebook_set_close_buttons_left (MidoriNotebook* self,
                                             gboolean value);
gboolean midori_notebook_get_close_buttons_visible (MidoriNotebook* self);
void midori_notebook_set_close_buttons_visible (MidoriNotebook* self,
                                                gboolean value);
gboolean midori_notebook_get_labels_visible (MidoriNotebook* self);
void midori_notebook_set_labels_visible (MidoriNotebook* self,
                                         gboolean value);
GType midori_paned_action_get_type (void) G_GNUC_CONST;
MidoriPanedAction* midori_paned_action_new (void);
MidoriPanedAction* midori_paned_action_construct (GType object_type);
void midori_paned_action_set_child1 (MidoriPanedAction* self,
                                     GtkWidget* widget,
                                     const gchar* name,
                                     gboolean resize,
                                     gboolean shrink);
void midori_paned_action_set_child2 (MidoriPanedAction* self,
                                     GtkWidget* widget,
                                     const gchar* name,
                                     gboolean resize,
                                     gboolean shrink);
GtkWidget* midori_paned_action_get_child1 (MidoriPanedAction* self);
GtkWidget* midori_paned_action_get_child2 (MidoriPanedAction* self);
GtkWidget* midori_paned_action_get_child_by_name (MidoriPanedAction* self,
                                                  const gchar* name);
gchar* midori_paned_action_get_child1_name (MidoriPanedAction* self);
gchar* midori_paned_action_get_child2_name (MidoriPanedAction* self);
GType midori_search_completion_get_type (void) G_GNUC_CONST;
MidoriSearchCompletion* midori_search_completion_new (void);
MidoriSearchCompletion* midori_search_completion_construct (GType object_type);
GType midori_window_state_get_type (void) G_GNUC_CONST;
GType midori_settings_get_type (void) G_GNUC_CONST;
gboolean midori_settings_delay_saving (MidoriSettings* self,
                                       const gchar* property);
MidoriSettings* midori_settings_new (void);
MidoriSettings* midori_settings_construct (GType object_type);
gboolean midori_settings_get_enable_javascript (MidoriSettings* self);
void midori_settings_set_enable_javascript (MidoriSettings* self,
                                            gboolean value);
gchar* midori_settings_get_default_charset (MidoriSettings* self);
void midori_settings_set_default_charset (MidoriSettings* self,
                                          const gchar* value);
gboolean midori_settings_get_zoom_text_and_images (MidoriSettings* self);
void midori_settings_set_zoom_text_and_images (MidoriSettings* self,
                                               gboolean value);
gboolean midori_settings_get_remember_last_window_size (MidoriSettings* self);
void midori_settings_set_remember_last_window_size (MidoriSettings* self,
                                                    gboolean value);
gint midori_settings_get_last_window_width (MidoriSettings* self);
void midori_settings_set_last_window_width (MidoriSettings* self,
                                            gint value);
gint midori_settings_get_last_window_height (MidoriSettings* self);
void midori_settings_set_last_window_height (MidoriSettings* self,
                                             gint value);
gint midori_settings_get_last_panel_position (MidoriSettings* self);
void midori_settings_set_last_panel_position (MidoriSettings* self,
                                              gint value);
gint midori_settings_get_last_panel_page (MidoriSettings* self);
void midori_settings_set_last_panel_page (MidoriSettings* self,
                                          gint value);
gint midori_settings_get_last_web_search (MidoriSettings* self);
void midori_settings_set_last_web_search (MidoriSettings* self,
                                          gint value);
gint midori_settings_get_search_width (MidoriSettings* self);
void midori_settings_set_search_width (MidoriSettings* self,
                                       gint value);
gboolean midori_settings_get_last_inspector_attached (MidoriSettings* self);
void midori_settings_set_last_inspector_attached (MidoriSettings* self,
                                                  gboolean value);
MidoriWindowState midori_settings_get_last_window_state (MidoriSettings* self);
void midori_settings_set_last_window_state (MidoriSettings* self,
                                            MidoriWindowState value);
guint midori_settings_get_inactivity_reset (MidoriSettings* self);
void midori_settings_set_inactivity_reset (MidoriSettings* self,
                                           guint value);
const gchar* midori_settings_get_default_theme_name (MidoriSettings* self);
const gchar* midori_settings_get_theme_name (MidoriSettings* self);
void midori_settings_set_theme_name (MidoriSettings* self,
                                     const gchar* value);
const gchar* midori_settings_get_block_uris (MidoriSettings* self);
void midori_settings_set_block_uris (MidoriSettings* self,
                                     const gchar* value);
const gchar* midori_settings_get_custom_title (MidoriSettings* self);
void midori_settings_set_custom_title (MidoriSettings* self,
                                       const gchar* value);
const gchar* midori_settings_get_location_entry_search (MidoriSettings* self);
void midori_settings_set_location_entry_search (MidoriSettings* self,
                                                const gchar* value);
gint midori_settings_get_clear_private_data (MidoriSettings* self);
void midori_settings_set_clear_private_data (MidoriSettings* self,
                                             gint value);
const gchar* midori_settings_get_clear_data (MidoriSettings* self);
void midori_settings_set_clear_data (MidoriSettings* self,
                                     const gchar* value);
gboolean midori_settings_get_compact_sidepanel (MidoriSettings* self);
void midori_settings_set_compact_sidepanel (MidoriSettings* self,
                                            gboolean value);
gboolean midori_settings_get_open_panels_in_windows (MidoriSettings* self);
void midori_settings_set_open_panels_in_windows (MidoriSettings* self,
                                                 gboolean value);
gboolean midori_settings_get_right_align_sidepanel (MidoriSettings* self);
void midori_settings_set_right_align_sidepanel (MidoriSettings* self,
                                                gboolean value);
gboolean midori_settings_get_show_menubar (MidoriSettings* self);
void midori_settings_set_show_menubar (MidoriSettings* self,
                                       gboolean value);
gboolean midori_settings_get_show_navigationbar (MidoriSettings* self);
void midori_settings_set_show_navigationbar (MidoriSettings* self,
                                             gboolean value);
gboolean midori_settings_get_show_bookmarkbar (MidoriSettings* self);
void midori_settings_set_show_bookmarkbar (MidoriSettings* self,
                                           gboolean value);
gboolean midori_settings_get_show_panel (MidoriSettings* self);
void midori_settings_set_show_panel (MidoriSettings* self,
                                     gboolean value);
gboolean midori_settings_get_show_statusbar (MidoriSettings* self);
void midori_settings_set_show_statusbar (MidoriSettings* self,
                                         gboolean value);
gboolean midori_settings_get_show_crash_dialog (MidoriSettings* self);
void midori_settings_set_show_crash_dialog (MidoriSettings* self,
                                            gboolean value);
const gchar* midori_settings_get_toolbar_items (MidoriSettings* self);
void midori_settings_set_toolbar_items (MidoriSettings* self,
                                        const gchar* value);
gboolean midori_settings_get_find_while_typing (MidoriSettings* self);
void midori_settings_set_find_while_typing (MidoriSettings* self,
                                            gboolean value);
gdouble midori_settings_get_zoom_level (MidoriSettings* self);
void midori_settings_set_zoom_level (MidoriSettings* self,
                                     gdouble value);
gboolean midori_settings_get_open_popups_in_tabs (MidoriSettings* self);
void midori_settings_set_open_popups_in_tabs (MidoriSettings* self,
                                              gboolean value);
gboolean midori_settings_get_kinetic_scrolling (MidoriSettings* self);
void midori_settings_set_kinetic_scrolling (MidoriSettings* self,
                                            gboolean value);
gboolean midori_settings_get_middle_click_opens_selection (MidoriSettings* self);
void midori_settings_set_middle_click_opens_selection (MidoriSettings* self,
                                                       gboolean value);
gboolean midori_settings_get_flash_window_on_new_bg_tabs (MidoriSettings* self);
void midori_settings_set_flash_window_on_new_bg_tabs (MidoriSettings* self,
                                                      gboolean value);
gboolean midori_settings_get_close_buttons_on_tabs (MidoriSettings* self);
void midori_settings_set_close_buttons_on_tabs (MidoriSettings* self,
                                                gboolean value);
gboolean midori_settings_get_open_tabs_in_the_background (MidoriSettings* self);
void midori_settings_set_open_tabs_in_the_background (MidoriSettings* self,
                                                      gboolean value);
gboolean midori_settings_get_open_tabs_next_to_current (MidoriSettings* self);
void midori_settings_set_open_tabs_next_to_current (MidoriSettings* self,
                                                    gboolean value);
gboolean midori_settings_get_always_show_tabbar (MidoriSettings* self);
void midori_settings_set_always_show_tabbar (MidoriSettings* self,
                                             gboolean value);
const gchar* midori_settings_get_homepage (MidoriSettings* self);
void midori_settings_set_homepage (MidoriSettings* self,
                                   const gchar* value);
const gchar* midori_settings_get_tabhome (MidoriSettings* self);
void midori_settings_set_tabhome (MidoriSettings* self,
                                  const gchar* value);
const gchar* midori_settings_get_download_folder (MidoriSettings* self);
void midori_settings_set_download_folder (MidoriSettings* self,
                                          const gchar* value);
const gchar* midori_settings_get_text_editor (MidoriSettings* self);
void midori_settings_set_text_editor (MidoriSettings* self,
                                      const gchar* value);
const gchar* midori_settings_get_news_aggregator (MidoriSettings* self);
void midori_settings_set_news_aggregator (MidoriSettings* self,
                                          const gchar* value);
const gchar* midori_settings_get_http_proxy (MidoriSettings* self);
void midori_settings_set_http_proxy (MidoriSettings* self,
                                     const gchar* value);
gint midori_settings_get_http_proxy_port (MidoriSettings* self);
void midori_settings_set_http_proxy_port (MidoriSettings* self,
                                          gint value);
gint midori_settings_get_maximum_cache_size (MidoriSettings* self);
void midori_settings_set_maximum_cache_size (MidoriSettings* self,
                                             gint value);
gboolean midori_settings_get_strip_referer (MidoriSettings* self);
void midori_settings_set_strip_referer (MidoriSettings* self,
                                        gboolean value);
gboolean midori_settings_get_first_party_cookies_only (MidoriSettings* self);
void midori_settings_set_first_party_cookies_only (MidoriSettings* self,
                                                   gboolean value);
gint midori_settings_get_maximum_cookie_age (MidoriSettings* self);
void midori_settings_set_maximum_cookie_age (MidoriSettings* self,
                                             gint value);
gint midori_settings_get_maximum_history_age (MidoriSettings* self);
void midori_settings_set_maximum_history_age (MidoriSettings* self,
                                              gint value);
GQuark midori_speed_dial_error_quark (void);
GType midori_speed_dial_get_type (void) G_GNUC_CONST;
MidoriSpeedDial* midori_speed_dial_new (const gchar* new_filename,
                                        const gchar* fallback);
MidoriSpeedDial* midori_speed_dial_construct (GType object_type,
                                              const gchar* new_filename,
                                              const gchar* fallback);
gchar* midori_speed_dial_get_next_free_slot (MidoriSpeedDial* self,
                                             guint* count);
void midori_speed_dial_add (MidoriSpeedDial* self,
                            const gchar* uri,
                            const gchar* title,
                            GdkPixbuf* img);
void midori_speed_dial_add_with_id (MidoriSpeedDial* self,
                                    const gchar* id,
                                    const gchar* uri,
                                    const gchar* title,
                                    GdkPixbuf* img);
const gchar* midori_speed_dial_get_html (MidoriSpeedDial* self,
                                         GError** error);
void midori_speed_dial_save_message (MidoriSpeedDial* self,
                                     const gchar* message,
                                     GError** error);
gboolean midori_speed_dial_get_close_buttons_left (MidoriSpeedDial* self);
void midori_speed_dial_set_close_buttons_left (MidoriSpeedDial* self,
                                               gboolean value);
gpointer midori_speed_dial_spec_ref (gpointer instance);
void midori_speed_dial_spec_unref (gpointer instance);
GParamSpec* midori_speed_dial_param_spec_spec (const gchar* name,
                                               const gchar* nick,
                                               const gchar* blurb,
                                               GType object_type,
                                               GParamFlags flags);
void midori_speed_dial_value_set_spec (GValue* value,
                                       gpointer v_object);
void midori_speed_dial_value_take_spec (GValue* value,
                                        gpointer v_object);
gpointer midori_speed_dial_value_get_spec (const GValue* value);
GType midori_speed_dial_spec_get_type (void) G_GNUC_CONST;
MidoriSpeedDialSpec* midori_speed_dial_spec_new (const gchar* dial_id,
                                                 const gchar* uri);
MidoriSpeedDialSpec* midori_speed_dial_spec_construct (GType object_type,
                                                       const gchar* dial_id,
                                                       const gchar* uri);
GType midori_new_view_get_type (void) G_GNUC_CONST;
GType midori_security_get_type (void) G_GNUC_CONST;
GType midori_load_status_get_type (void) G_GNUC_CONST;
GType midori_load_error_get_type (void) G_GNUC_CONST;
gboolean midori_tab_is_blank (MidoriTab* self);
void midori_tab_inject_stylesheet (MidoriTab* self,
                                   const gchar* stylesheet);
gboolean midori_tab_can_view_source (MidoriTab* self);
gchar* midori_tab_get_display_title (const gchar* title,
                                     const gchar* uri);
PangoEllipsizeMode midori_tab_get_display_ellipsize (const gchar* title,
                                                     const gchar* uri);
gboolean midori_tab_can_save (MidoriTab* self);
void midori_tab_stop_loading (MidoriTab* self);
gboolean midori_tab_can_go_forward (MidoriTab* self);
void midori_tab_go_forward (MidoriTab* self);
void midori_tab_unmark_text_matches (MidoriTab* self);
gboolean midori_tab_find (MidoriTab* self,
                          const gchar* text,
                          gboolean case_sensitive,
                          gboolean forward);
void midori_tab_update_actions (MidoriTab* self,
                                GtkActionGroup* actions,
                                GAsyncReadyCallback _callback_,
                                gpointer _user_data_);
void midori_tab_update_actions_finish (MidoriTab* self,
                                       GAsyncResult* _res_);
MidoriTab* midori_tab_new (void);
MidoriTab* midori_tab_construct (GType object_type);
MidoriTab* midori_tab_get_related (MidoriTab* self);
void midori_tab_set_related (MidoriTab* self,
                             MidoriTab* value);
WebKitWebView* midori_tab_get_web_view (MidoriTab* self);
const gchar* midori_tab_get_uri (MidoriTab* self);
void midori_tab_set_uri (MidoriTab* self,
                         const gchar* value);
gboolean midori_tab_get_special (MidoriTab* self);
void midori_tab_set_special (MidoriTab* self,
                             gboolean value);
gboolean midori_tab_get_minimized (MidoriTab* self);
void midori_tab_set_minimized (MidoriTab* self,
                               gboolean value);
const gchar* midori_tab_get_mime_type (MidoriTab* self);
void midori_tab_set_mime_type (MidoriTab* self,
                               const gchar* value);
MidoriSecurity midori_tab_get_security (MidoriTab* self);
void midori_tab_set_security (MidoriTab* self,
                              MidoriSecurity value);
MidoriLoadStatus midori_tab_get_load_status (MidoriTab* self);
void midori_tab_set_load_status (MidoriTab* self,
                                 MidoriLoadStatus value);
MidoriLoadError midori_tab_get_load_error (MidoriTab* self);
void midori_tab_set_load_error (MidoriTab* self,
                                MidoriLoadError value);
const gchar* midori_tab_get_statusbar_text (MidoriTab* self);
void midori_tab_set_statusbar_text (MidoriTab* self,
                                    const gchar* value);
GdkColor* midori_tab_get_fg_color (MidoriTab* self);
void midori_tab_set_fg_color (MidoriTab* self,
                              GdkColor* value);
GdkColor* midori_tab_get_bg_color (MidoriTab* self);
void midori_tab_set_bg_color (MidoriTab* self,
                              GdkColor* value);
gdouble midori_tab_get_progress (MidoriTab* self);
void midori_tab_set_progress (MidoriTab* self,
                              gdouble value);
gboolean midori_tab_get_is_dialog (MidoriTab* self);
void midori_tab_set_is_dialog (MidoriTab* self,
                               gboolean value);
gboolean midori_tab_get_view_source (MidoriTab* self);
GType midori_viewable_get_type (void) G_GNUC_CONST;
const gchar* midori_viewable_get_stock_id (MidoriViewable* self);
const gchar* midori_viewable_get_label (MidoriViewable* self);
GtkWidget* midori_viewable_get_toolbar (MidoriViewable* self);
GType midori_view_completion_get_type (void) G_GNUC_CONST;
MidoriViewCompletion* midori_view_completion_new (void);
MidoriViewCompletion* midori_view_completion_construct (GType object_type);
GType midori_window_get_type (void) G_GNUC_CONST;
void midori_window_add_action_group (MidoriWindow* self,
                                     GtkActionGroup* action_group);
GtkWidget* midori_window_new (void);
GtkWidget* midori_window_construct (GType object_type);
GtkToolItem* midori_window_get_tool_item (MidoriWindow* self,
                                          const gchar* name);
void midori_window_add_action (MidoriWindow* self,
                               GtkAction* action);
void midori_window_remove_action (MidoriWindow* self,
                                  GtkAction* action);
void midori_window_add_toolbar (MidoriWindow* self,
                                GtkWidget* toolbar);
GtkWidget* midori_window_get_toolbar (MidoriWindow* self);
const gchar* midori_window_get_actions (MidoriWindow* self);
void midori_window_set_actions (MidoriWindow* self,
                                const gchar* value);
GtkWidget* midori_window_get_contents (MidoriWindow* self);
void midori_window_set_contents (MidoriWindow* self,
                                 GtkWidget* value);
gboolean midori_window_get_show_menubar (MidoriWindow* self);
void midori_window_set_show_menubar (MidoriWindow* self,
                                     gboolean value);


G_END_DECLS

#endif
